{"version":3,"sources":["Table/index.js","EnquiryForm/index.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","table","minWidth","SimpleTable","props","classes","TableContainer","component","Paper","Table","className","aria-label","TableHead","TableRow","TableCell","align","TableBody","tableData","map","row","key","name","scope","custId","gender","contact","EnquiryForm","state","customerName","mobNo","fetchedData","createData","handleInputChange","event","setState","target","value","genderList","getCustomerId","a","postData","FormData","payload","append","JSON","stringify","fetch","method","headers","response","json","jsonMap","console","log","tableDataCopy","concat","push","localStorage","setItem","dataList","parse","getItem","this","TextField","id","label","variant","onChange","Select","labelId","color","el","MenuItem","CircularProgress","Button","onClick","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"ybAUMA,EAAYC,YAAW,CACzBC,MAAO,CACHC,SAAU,OAKH,SAASC,EAAYC,GAChC,IAAMC,EAAUN,IAEhB,OACI,kBAACO,EAAA,EAAD,CAAgBC,UAAWC,KAEvB,kBAACC,EAAA,EAAD,CAAOC,UAAWL,EAAQJ,MAAOU,aAAW,gBACxC,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,oBACA,kBAACA,EAAA,EAAD,CAAWC,MAAM,SAAjB,QACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,SAAjB,UACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,SAAjB,gBAGR,kBAACC,EAAA,EAAD,KACKZ,EAAMa,UAAUC,KAAI,SAACC,GAAD,OACjB,kBAACN,EAAA,EAAD,CAAUO,IAAKD,EAAIE,MACf,kBAACP,EAAA,EAAD,CAAWP,UAAU,KAAKe,MAAM,OAC3BH,EAAII,QAET,kBAACT,EAAA,EAAD,CAAWC,MAAM,SAASI,EAAIE,MAC9B,kBAACP,EAAA,EAAD,CAAWC,MAAM,SAASI,EAAIK,QAC9B,kBAACV,EAAA,EAAD,CAAWC,MAAM,SAASI,EAAIM,gB,ICiF3CC,E,kDAtGX,WAAYtB,GAAQ,IAAD,8BACf,cAAMA,IATVuB,MAAQ,CACJC,aAAc,GACdJ,OAAQ,OACRK,MAAO,GACPC,YAAa,GACbb,UAAW,IAGI,EAInBc,WAAa,SAACR,EAAQF,EAAMG,EAAQC,GAChC,MAAO,CAACF,SAAQF,OAAMG,SAAQC,YALf,EASnBO,kBAAoB,SAACC,GACjB,EAAKC,SAAL,eACKD,EAAME,OAAOd,KAAOY,EAAME,OAAOC,SAXvB,EAenBC,WAAa,CAAC,OAAQ,SAAU,iBAAkB,UAf/B,EAiBnBC,cAjBmB,sBAiBH,oCAAAC,EAAA,6DACZ,EAAKL,SAAS,CAACJ,YAAa,OACxBU,EAAW,IAAIC,SACbC,EAAU,EAAKf,MACrBa,EAASG,OAAO,YAAaC,KAAKC,UAAUH,IAJhC,SAMSI,MAAM,6GAA8G,CACrIC,OAAQ,OACRC,QAASR,IARD,cAMRS,EANQ,gBAUQA,EAASC,OAVjB,OAURC,EAVQ,OAWZ,EAAKjB,SAAS,CAACJ,YAAaqB,EAAO,aACnCC,QAAQC,IAAI,EAAK1B,OACjByB,QAAQC,IAAI,0BAA4BF,EAAO,aAC3CG,EAAgB,GAAGC,OAAO,EAAK5B,MAAMV,YAC3BuC,KAAK,EAAKzB,WAAWoB,EAAO,WAAgB,EAAKxB,MAAMC,aAAc,EAAKD,MAAMH,OAAQ,EAAKG,MAAME,QACjH,EAAKK,SAAS,CAACjB,UAAWqC,IAC1BG,aAAaC,QAAQ,SAAUd,KAAKC,UAAUS,IAC9C,EAAKpB,SAAS,CACVN,aAAc,GACdJ,OAAQ,OACRK,MAAO,GACPC,YAAa,KAtBL,4CAjBG,E,gEA4Cf,IAAI6B,EAAWf,KAAKgB,MAAMH,aAAaI,QAAQ,WAC/CC,KAAK5B,SAAS,CAACjB,UAAW0C,IAC1BP,QAAQC,IAAII,aAAaI,QAAQ,WAKjCT,QAAQC,IAAI,6B,+BAGN,IAAD,OACL,OACI,6BACI,kBAAC7C,EAAA,EAAD,CAAOE,UAAU,SACb,8BACI,6BACI,kBAACqD,EAAA,EAAD,CAAW1C,KAAK,eAAe2C,GAAG,eAAeC,MAAM,gBAAgBC,QAAQ,WACpEC,SAAUL,KAAK9B,kBAAmBI,MAAO0B,KAAKnC,MAAMC,gBAKnE,6BACI,kBAACmC,EAAA,EAAD,CAAW1C,KAAK,QAAQ2C,GAAG,QAAQC,MAAM,cAAcC,QAAQ,WACpDC,SAAUL,KAAK9B,kBAAmBI,MAAO0B,KAAKnC,MAAME,SAGnE,6BAGI,kBAACuC,EAAA,EAAD,CACIC,QAAQ,oCACRL,GAAG,8BACH3C,KAAM,SACNe,MAAO0B,KAAKnC,MAAMH,OAClB2C,SAAUL,KAAK9B,kBACfsC,MAAM,aAELR,KAAKzB,WAAWnB,KAAI,SAACqD,GAAD,OAChB,kBAACC,EAAA,EAAD,CAAUpC,MAAOmC,GAAKA,SAOX,OAA3BT,KAAKnC,MAAMG,YAAuB,6BAC3B,kBAAC2C,EAAA,EAAD,CAAkBH,MAAM,eAC5B,kBAACI,EAAA,EAAD,CAAQJ,MAAM,UAAUJ,QAAQ,YAAYS,QAAS,kBAAM,EAAKrC,kBAAhE,cAGR,kBAACnC,EAAD,CAAaO,UAAU,cAAcO,UAAW6C,KAAKnC,MAAMV,iB,GAxGjD2D,IAAMC,WCKjBC,MAXf,WACI,OACI,yBAAKpE,UAAU,OACX,4BAAQA,UAAU,cACd,kBAAC,EAAD,SCIIqE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5C,QAAQ4C,MAAMA,EAAMC,c","file":"static/js/main.88a7599e.chunk.js","sourcesContent":["import React from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nconst useStyles = makeStyles({\n    table: {\n        minWidth: 650,\n    },\n});\n\n\nexport default function SimpleTable(props) {\n    const classes = useStyles();\n\n    return (\n        <TableContainer component={Paper}>\n            {/*{console.log(props)}*/}\n            <Table className={classes.table} aria-label=\"simple table\">\n                <TableHead>\n                    <TableRow>\n                        <TableCell>Customer ID</TableCell>\n                        <TableCell align=\"right\">Name</TableCell>\n                        <TableCell align=\"right\">Gender</TableCell>\n                        <TableCell align=\"right\">Contact No</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {props.tableData.map((row) => (\n                        <TableRow key={row.name}>\n                            <TableCell component=\"th\" scope=\"row\">\n                                {row.custId}\n                            </TableCell>\n                            <TableCell align=\"right\">{row.name}</TableCell>\n                            <TableCell align=\"right\">{row.gender}</TableCell>\n                            <TableCell align=\"right\">{row.contact}</TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n}","import React from \"react\";\nimport './styles.css'\nimport {Button} from '@material-ui/core';\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport TextField from \"@material-ui/core/TextField\";\nimport SimpleTable from \"../Table\";\nimport Paper from \"@material-ui/core/Paper\";\n\nclass EnquiryForm extends React.Component {\n    state = {\n        customerName: '',\n        gender: \"Male\",\n        mobNo: \"\",\n        fetchedData: \"\",\n        tableData: [],\n    };\n\n    constructor(props) {\n        super(props);\n    }\n\n    createData = (custId, name, gender, contact,) => {\n        return {custId, name, gender, contact,}\n    }\n\n\n    handleInputChange = (event) => {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n\n    genderList = [\"Male\", \"Female\", \"Rather Not Say\", \"Others\"];\n\n    getCustomerId = async () => {\n        this.setState({fetchedData: null});\n        let postData = new FormData();\n        const payload = this.state;\n        postData.append(\"myjsonkey\", JSON.stringify(payload));\n\n        let response = await fetch('https://cors-anywhere.herokuapp.com/https://us-central1-form-manager-7234f.cloudfunctions.net/saveCustomer', {\n            method: 'POST',\n            headers: postData\n        })\n        let jsonMap = await response.json();\n        this.setState({fetchedData: jsonMap['customerID']});\n        console.log(this.state);\n        console.log(\"fetched CustomerID is: \" + jsonMap['customerID']);\n        let tableDataCopy = [].concat(this.state.tableData);\n        tableDataCopy.push(this.createData(jsonMap['customerID'], this.state.customerName, this.state.gender, this.state.mobNo))\n        this.setState({tableData: tableDataCopy});\n        localStorage.setItem('myData', JSON.stringify(tableDataCopy));\n        this.setState({\n            customerName: '',\n            gender: \"Male\",\n            mobNo: \"\",\n            fetchedData: \"\",\n        })\n    }\n\n    componentDidMount() {\n        let dataList = JSON.parse(localStorage.getItem('myData'));\n        this.setState({tableData: dataList})\n        console.log(localStorage.getItem('myData'))\n        // localStorage.getItem('myData').then((data)=>{\n        //     console.log(data);\n        //     console.log(\" 2data from local storage\");\n        // })\n        console.log(\"data from local storage\");\n    }\n\n    render() {\n        return (\n            <div>\n                <Paper className=\"paper\">\n                    <form>\n                        <div>\n                            <TextField name=\"customerName\" id=\"customerName\" label=\"Customer Name\" variant=\"outlined\"\n                                       onChange={this.handleInputChange} value={this.state.customerName}/>\n                            {/*<label htmlFor=\"customerName\">Your Name:</label>*/}\n                            {/*<input type=\"text\" name=\"customerName\" value={this.state.customerName}*/}\n                            {/*       onChange={this.handleInputChange}/>*/}\n                        </div>\n                        <div>\n                            <TextField name=\"mobNo\" id=\"mobNo\" label=\"Contact No.\" variant=\"outlined\"\n                                       onChange={this.handleInputChange} value={this.state.mobNo}/>\n\n                        </div>\n                        <div>\n\n\n                            <Select\n                                labelId=\"demo-simple-select-outlined-label\"\n                                id=\"demo-simple-select-outlined\"\n                                name={\"gender\"}\n                                value={this.state.gender}\n                                onChange={this.handleInputChange}\n                                color=\"secondary\"\n                            >\n                                {this.genderList.map((el) =>\n                                    (<MenuItem value={el}>{el}</MenuItem>)\n                                )}\n                            </Select>\n\n                        </div>\n\n                    </form>\n                    {this.state.fetchedData === null ? <div>\n                            <CircularProgress color=\"secondary\"/></div> :\n                        <Button color=\"primary\" variant=\"contained\" onClick={() => this.getCustomerId()}>Save info\n                        </Button>}\n                </Paper>\n                <SimpleTable className=\"simpleTable\" tableData={this.state.tableData}/>\n            </div>\n        );\n    }\n}\n\n\nexport default EnquiryForm;","import React from 'react';\nimport './App.css';\nimport EnquiryForm from \"./EnquiryForm\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <EnquiryForm/>\n\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}