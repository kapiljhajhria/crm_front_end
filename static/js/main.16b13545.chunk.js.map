{"version":3,"sources":["Table/index.js","EnquiryForm/index.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","table","minWidth","SimpleTable","props","classes","TableContainer","component","Paper","Table","className","aria-label","TableHead","TableRow","TableCell","align","TableBody","tableData","map","row","key","name","scope","custId","gender","contact","custIdBeingDeleted","includes","CircularProgress","color","Button","variant","startIcon","onClick","deleteCustomerId","EnquiryForm","state","customerName","mobNo","fetchedData","openSnackBar","lastDeletedCustomer","showSnackBar","setState","closeSnackBar","event","reason","createData","a","custIdBeingDeletedCopy","JSON","parse","stringify","push","console","log","fetch","tableDataCopy","concat","indexOfCust","findIndex","cust","lastDeletedCustomerCopy","splice","localStorage","setItem","dataList","getItem","handleInputChange","target","value","genderList","undoDelete","filter","updateTableData","tableArray","elementoBeAdded","position","undefined","getCustomerId","postData","FormData","payload","append","method","headers","response","json","jsonMap","this","TextField","id","label","onChange","Select","labelId","el","MenuItem","Snackbar","open","autoHideDuration","onClose","Alert","severity","action","size","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0cAcMA,EAAYC,YAAW,CACzBC,MAAO,CACHC,SAAU,OAKH,SAASC,EAAYC,GAChC,IAAMC,EAAUN,IAUhB,OACI,kBAACO,EAAA,EAAD,CAAgBC,UAAWC,KAEvB,kBAACC,EAAA,EAAD,CAAOC,UAAWL,EAAQJ,MAAOU,aAAW,gBACxC,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,oBACA,kBAACA,EAAA,EAAD,CAAWC,MAAM,SAAjB,QACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,SAAjB,UACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,SAAjB,cACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,SAAjB,aAGR,kBAACC,EAAA,EAAD,KACKZ,EAAMa,UAAUC,KAAI,SAACC,GAAD,OACjB,kBAACN,EAAA,EAAD,CAAUO,IAAKD,EAAIE,MACf,kBAACP,EAAA,EAAD,CAAWP,UAAU,KAAKe,MAAM,OAC3BH,EAAII,QAET,kBAACT,EAAA,EAAD,CAAWC,MAAM,SAASI,EAAIE,MAC9B,kBAACP,EAAA,EAAD,CAAWC,MAAM,SAASI,EAAIK,QAC9B,kBAACV,EAAA,EAAD,CAAWC,MAAM,SAASI,EAAIM,SAC9B,kBAACX,EAAA,EAAD,CAAWC,MAAM,SAASX,EAAMsB,mBAAmBC,SAASR,EAAII,QAAU,6BACtE,kBAACK,EAAA,EAAD,CAAkBC,MAAM,eAAsB,kBAACC,EAAA,EAAD,CAC9CC,QAAQ,YACRF,MAAM,YACNnB,UAAW,YACXsB,UAAW,kBAAC,IAAD,MACXC,QAAS,WACL7B,EAAM8B,iBAAiBf,EAAII,mB,sBC0IhDY,E,kDA/KX,WAAY/B,GAAQ,IAAD,8BACf,cAAMA,IAZVgC,MAAQ,CACJC,aAAc,GACdb,OAAQ,OACRc,MAAO,GACPC,YAAa,GACbtB,UAAW,GACXS,mBAAoB,GACpBc,cAAc,EACdC,oBAAqB,IAGN,EAKnBC,aAAe,WACX,EAAKC,SAAS,CAACH,cAAc,KANd,EASnBI,cAAgB,SAACC,EAAOC,GACL,cAAXA,GAIJ,EAAKH,SAAS,CAACH,cAAc,KAdd,EAgBnBO,WAAa,SAACxB,EAAQF,EAAMG,EAAQC,GAChC,MAAO,CAACF,SAAQF,OAAMG,SAAQC,YAjBf,EAoBnBS,iBApBmB,uCAoBA,WAAOX,GAAP,uBAAAyB,EAAA,6DACXC,EAAyBC,KAAKC,MAAMD,KAAKE,UAAU,EAAKhB,MAAMV,sBAC3C2B,KAAK9B,GAC5B,EAAKoB,SAAS,CAACjB,mBAAoBuB,IACnCK,QAAQC,IAAI,qBAAuBhC,GAJpB,SAKTiC,MAAM,kHALG,OAOXC,EAAgB,GAAGC,OAAO,EAAKtB,MAAMnB,WACrC0C,EAAcF,EAAcG,WAAU,SAACC,GAAD,OAAUA,EAAKtC,SAAWA,KACpE+B,QAAQC,IAAI,eAAiBI,GAE7BG,EAA0B,EADtBA,EAA0BL,EAAcM,OAAOJ,EAAa,IACb,GAAIA,GACvD,EAAKhB,SAAS,CAACF,oBAAqBqB,IACpCE,aAAaC,QAAQ,SAAUf,KAAKE,UAAUK,IAC1CS,EAAWhB,KAAKC,MAAMa,aAAaG,QAAQ,WAC/C,EAAKxB,SAAS,CAAC1B,UAAS,OAAEiD,QAAF,IAAEA,IAAY,KACtC,EAAKxB,eAhBU,4CApBA,wDAuCnB0B,kBAAoB,SAACvB,GACjB,EAAKF,SAAL,eACKE,EAAMwB,OAAOhD,KAAOwB,EAAMwB,OAAOC,SAzCvB,EA4CnBC,WAAa,CAAC,OAAQ,SAAU,iBAAkB,UA5C/B,EA6CnBC,WA7CmB,sBA6CN,gCAAAxB,EAAA,6DACT,EAAKJ,gBACDkB,EAA0B,EAAK1B,MAAMK,oBACrCgB,EAAgB,GAAGC,OAAO,EAAKtB,MAAMnB,WAEzCgC,GADIA,EAAyB,GAAGS,OAAO,EAAKtB,MAAMV,qBACF+C,QAAO,SAAClD,GAAD,OAAYuC,EAAwB,GAAGvC,SAAWA,KACzG,EAAKoB,SAAS,CAACjB,mBAAoBuB,IAN1B,SAOH,EAAKyB,gBAAgBjB,EAAeK,EAAwB,GAAIA,EAAwB,IAPrF,2CA7CM,EAuDnBY,gBAvDmB,uCAuDD,WAAOC,EAAYC,EAAiBC,GAApC,SAAA7B,EAAA,sDACdM,QAAQC,IAAI,+BAAiCsB,QAC5BC,IAAbD,EACAF,EAAWtB,KAAKuB,GAEhBD,EAAWZ,OAAOc,EAAU,EAAGD,GACnC,EAAKjC,SAAS,CAAC1B,UAAW0D,EAAYlC,oBAAqB,KAC3DuB,aAAaC,QAAQ,SAAUf,KAAKE,UAAUuB,IAPhC,2CAvDC,4DAgEnBI,cAhEmB,sBAgEH,oCAAA/B,EAAA,6DACZ,EAAKL,SAAS,CAACJ,YAAa,OACxByC,EAAW,IAAIC,SACbC,EAAU,EAAK9C,MACrB4C,EAASG,OAAO,YAAajC,KAAKE,UAAU8B,IAJhC,SAMS1B,MAAM,6GAA8G,CACrI4B,OAAQ,OACRC,QAASL,IARD,cAMRM,EANQ,gBAUQA,EAASC,OAVjB,cAURC,EAVQ,OAWZ,EAAK7C,SAAS,CAACJ,YAAaiD,EAAO,aACnClC,QAAQC,IAAI,EAAKnB,OACjBkB,QAAQC,IAAI,0BAA4BiC,EAAO,YAE3C/B,EAAgB,GAAGC,OAAO,EAAKtB,MAAMnB,WAf7B,UAgBN,EAAKyD,gBAAgBjB,EAAe,EAAKV,WAAWyC,EAAO,WAAgB,EAAKpD,MAAMC,aAAc,EAAKD,MAAMZ,OAAQ,EAAKY,MAAME,QAhB5H,QAiBZ,EAAKK,SAAS,CACVN,aAAc,GACdb,OAAQ,OACRc,MAAO,GACPC,YAAa,KArBL,4CAhEG,E,gEA0Ff,IAAI2B,EAAWhB,KAAKC,MAAMa,aAAaG,QAAQ,WAC/CsB,KAAK9C,SAAS,CAAC1B,UAAS,OAAEiD,QAAF,IAAEA,IAAY,KACtCZ,QAAQC,IAAIS,aAAaG,QAAQ,WAKjCb,QAAQC,IAAI,6B,+BAGN,IAAD,OACL,OACI,6BACI,kBAAC/C,EAAA,EAAD,CAAOE,UAAU,SACb,8BACI,6BACI,kBAACgF,EAAA,EAAD,CAAWrE,KAAK,eAAesE,GAAG,eAAeC,MAAM,gBAAgB7D,QAAQ,WACpE8D,SAAUJ,KAAKrB,kBAAmBE,MAAOmB,KAAKrD,MAAMC,gBAKnE,6BACI,kBAACqD,EAAA,EAAD,CAAWrE,KAAK,QAAQsE,GAAG,QAAQC,MAAM,cAAc7D,QAAQ,WACpD8D,SAAUJ,KAAKrB,kBAAmBE,MAAOmB,KAAKrD,MAAME,SAGnE,6BAGI,kBAACwD,EAAA,EAAD,CACIC,QAAQ,oCACRJ,GAAG,8BACHtE,KAAM,SACNiD,MAAOmB,KAAKrD,MAAMZ,OAClBqE,SAAUJ,KAAKrB,kBACfvC,MAAM,aAEL4D,KAAKlB,WAAWrD,KAAI,SAAC8E,GAAD,OAChB,kBAACC,EAAA,EAAD,CAAU3B,MAAO0B,GAAKA,SAOX,OAA3BP,KAAKrD,MAAMG,YAAuB,6BAC3B,kBAACX,EAAA,EAAD,CAAkBC,MAAM,eAC5B,kBAACC,EAAA,EAAD,CAAQD,MAAM,UAAUE,QAAQ,YAAYE,QAAS,kBAAM,EAAK8C,kBAAhE,cAGR,kBAAC5E,EAAD,CAAaO,UAAU,cAAcO,UAAWwE,KAAKrD,MAAMnB,UAC9CS,mBAAoB+D,KAAKrD,MAAMV,mBAC/BQ,iBAAkB,SAACX,GAAD,OAAY,EAAKW,iBAAiBX,MACjE,kBAAC2E,EAAA,EAAD,CAAUC,KAAMV,KAAKrD,MAAMI,aAAc4D,iBAAkB,IAAMC,QAASZ,KAAK7C,eAC3E,kBAAC0D,EAAA,EAAD,CAAOD,QAASZ,KAAK7C,cAAe2D,SAAS,UAAUC,OACnD,kBAAC1E,EAAA,EAAD,CAAQD,MAAM,UAAU4E,KAAK,QAAQxE,QAASwD,KAAKjB,YAAnD,SADJ,2B,GA7JMkC,IAAMC,WCGjBC,MAXf,WACI,OACI,yBAAKlG,UAAU,OACX,4BAAQA,UAAU,cACd,kBAAC,EAAD,SCIImG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxE,QAAQwE,MAAMA,EAAMC,c","file":"static/js/main.16b13545.chunk.js","sourcesContent":["import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n\n\nconst useStyles = makeStyles({\n    table: {\n        minWidth: 650,\n    },\n});\n\n\nexport default function SimpleTable(props) {\n    const classes = useStyles();\n    // function deleteCustomerId(custId){\n    //     console.log(\"deleting stuff id:\"+custId);\n    //     let tableDataCopy = [].concat(props.tableData)\n    //     let indexOfCust=tableDataCopy.findIndex((cust)=>cust.custId===custId);\n    //     console.log(\"found index:\"+indexOfCust)\n    //     tableDataCopy.splice(indexOfCust,1);\n    //     localStorage.setItem('myData', JSON.stringify(tableDataCopy));\n    //\n    // }\n    return (\n        <TableContainer component={Paper}>\n            {/*{console.log(props)}*/}\n            <Table className={classes.table} aria-label=\"simple table\">\n                <TableHead>\n                    <TableRow>\n                        <TableCell>Customer ID</TableCell>\n                        <TableCell align=\"right\">Name</TableCell>\n                        <TableCell align=\"right\">Gender</TableCell>\n                        <TableCell align=\"right\">Contact No</TableCell>\n                        <TableCell align=\"right\">Remove?</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {props.tableData.map((row) => (\n                        <TableRow key={row.name}>\n                            <TableCell component=\"th\" scope=\"row\">\n                                {row.custId}\n                            </TableCell>\n                            <TableCell align=\"right\">{row.name}</TableCell>\n                            <TableCell align=\"right\">{row.gender}</TableCell>\n                            <TableCell align=\"right\">{row.contact}</TableCell>\n                            <TableCell align=\"right\">{props.custIdBeingDeleted.includes(row.custId) ? <div>\n                                <CircularProgress color=\"secondary\"/></div> : <Button\n                                variant=\"contained\"\n                                color=\"secondary\"\n                                className={\"deleteBtn\"}\n                                startIcon={<DeleteIcon/>}\n                                onClick={() => {\n                                    props.deleteCustomerId(row.custId)\n                                }}\n                            />}</TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n}","import React from \"react\";\nimport './styles.css'\nimport {Button} from '@material-ui/core';\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport TextField from \"@material-ui/core/TextField\";\nimport SimpleTable from \"../Table\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport {Alert} from '@material-ui/lab';\n\nclass EnquiryForm extends React.Component {\n    state = {\n        customerName: '',\n        gender: \"Male\",\n        mobNo: \"\",\n        fetchedData: \"\",\n        tableData: [],\n        custIdBeingDeleted: [],\n        openSnackBar: false,\n        lastDeletedCustomer: []\n    };\n\n    constructor(props) {\n        super(props);\n    }\n\n\n    showSnackBar = () => {\n        this.setState({openSnackBar: true});\n    };\n\n    closeSnackBar = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n\n        this.setState({openSnackBar: false});\n    };\n    createData = (custId, name, gender, contact,) => {\n        return {custId, name, gender, contact,}\n    }\n\n    deleteCustomerId = async (custId) => {\n        let custIdBeingDeletedCopy = JSON.parse(JSON.stringify(this.state.custIdBeingDeleted));\n        custIdBeingDeletedCopy.push(custId);\n        this.setState({custIdBeingDeleted: custIdBeingDeletedCopy})\n        console.log(\"deleting stuff id:\" + custId);\n        await fetch(\"https://cors-anywhere.herokuapp.com/http://slowwly.robertomurray.co.uk/delay/3000/url/http://www.google.co.uk \");\n\n        let tableDataCopy = [].concat(this.state.tableData)\n        let indexOfCust = tableDataCopy.findIndex((cust) => cust.custId === custId);\n        console.log(\"found index:\" + indexOfCust)\n        let lastDeletedCustomerCopy = tableDataCopy.splice(indexOfCust, 1);\n        lastDeletedCustomerCopy = [lastDeletedCustomerCopy[0], indexOfCust]\n        this.setState({lastDeletedCustomer: lastDeletedCustomerCopy})\n        localStorage.setItem('myData', JSON.stringify(tableDataCopy));\n        let dataList = JSON.parse(localStorage.getItem('myData'));\n        this.setState({tableData: dataList ?? []})\n        this.showSnackBar();\n\n    }\n    handleInputChange = (event) => {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n    genderList = [\"Male\", \"Female\", \"Rather Not Say\", \"Others\"];\n    undoDelete = async () => {\n        this.closeSnackBar();\n        let lastDeletedCustomerCopy = this.state.lastDeletedCustomer;\n        let tableDataCopy = [].concat(this.state.tableData);\n        let custIdBeingDeletedCopy = [].concat(this.state.custIdBeingDeleted);\n        custIdBeingDeletedCopy = custIdBeingDeletedCopy.filter((custId) => lastDeletedCustomerCopy[0].custId !== custId)\n        this.setState({custIdBeingDeleted: custIdBeingDeletedCopy});\n        await this.updateTableData(tableDataCopy, lastDeletedCustomerCopy[0], lastDeletedCustomerCopy[1])\n    }\n\n    updateTableData = async (tableArray, elementoBeAdded, position) => {\n        console.log(\"position in new function is:\" + position)\n        if (position === undefined)\n            tableArray.push(elementoBeAdded)\n        else\n            tableArray.splice(position, 0, elementoBeAdded);\n        this.setState({tableData: tableArray, lastDeletedCustomer: []});\n        localStorage.setItem('myData', JSON.stringify(tableArray));\n    }\n    getCustomerId = async () => {\n        this.setState({fetchedData: null});\n        let postData = new FormData();\n        const payload = this.state;\n        postData.append(\"myjsonkey\", JSON.stringify(payload));\n\n        let response = await fetch('https://cors-anywhere.herokuapp.com/https://us-central1-form-manager-7234f.cloudfunctions.net/saveCustomer', {\n            method: 'POST',\n            headers: postData\n        })\n        let jsonMap = await response.json();\n        this.setState({fetchedData: jsonMap['customerID']});\n        console.log(this.state);\n        console.log(\"fetched CustomerID is: \" + jsonMap['customerID']);\n\n        let tableDataCopy = [].concat(this.state.tableData);\n        await this.updateTableData(tableDataCopy, this.createData(jsonMap['customerID'], this.state.customerName, this.state.gender, this.state.mobNo))\n        this.setState({\n            customerName: '',\n            gender: \"Male\",\n            mobNo: \"\",\n            fetchedData: \"\",\n        })\n    }\n\n    componentDidMount() {\n        let dataList = JSON.parse(localStorage.getItem('myData'));\n        this.setState({tableData: dataList ?? []})\n        console.log(localStorage.getItem('myData'))\n        // localStorage.getItem('myData').then((data)=>{\n        //     console.log(data);\n        //     console.log(\" 2data from local storage\");\n        // })\n        console.log(\"data from local storage\");\n    }\n\n    render() {\n        return (\n            <div>\n                <Paper className=\"paper\">\n                    <form>\n                        <div>\n                            <TextField name=\"customerName\" id=\"customerName\" label=\"Customer Name\" variant=\"outlined\"\n                                       onChange={this.handleInputChange} value={this.state.customerName}/>\n                            {/*<label htmlFor=\"customerName\">Your Name:</label>*/}\n                            {/*<input type=\"text\" name=\"customerName\" value={this.state.customerName}*/}\n                            {/*       onChange={this.handleInputChange}/>*/}\n                        </div>\n                        <div>\n                            <TextField name=\"mobNo\" id=\"mobNo\" label=\"Contact No.\" variant=\"outlined\"\n                                       onChange={this.handleInputChange} value={this.state.mobNo}/>\n\n                        </div>\n                        <div>\n\n\n                            <Select\n                                labelId=\"demo-simple-select-outlined-label\"\n                                id=\"demo-simple-select-outlined\"\n                                name={\"gender\"}\n                                value={this.state.gender}\n                                onChange={this.handleInputChange}\n                                color=\"secondary\"\n                            >\n                                {this.genderList.map((el) =>\n                                    (<MenuItem value={el}>{el}</MenuItem>)\n                                )}\n                            </Select>\n\n                        </div>\n\n                    </form>\n                    {this.state.fetchedData === null ? <div>\n                            <CircularProgress color=\"secondary\"/></div> :\n                        <Button color=\"primary\" variant=\"contained\" onClick={() => this.getCustomerId()}>Save info\n                        </Button>}\n                </Paper>\n                <SimpleTable className=\"simpleTable\" tableData={this.state.tableData}\n                             custIdBeingDeleted={this.state.custIdBeingDeleted}\n                             deleteCustomerId={(custId) => this.deleteCustomerId(custId)}/>\n                <Snackbar open={this.state.openSnackBar} autoHideDuration={3000} onClose={this.closeSnackBar}>\n                    <Alert onClose={this.closeSnackBar} severity=\"success\" action={\n                        <Button color=\"inherit\" size=\"small\" onClick={this.undoDelete}>\n                            Undo\n                        </Button>\n                    }>\n                        Customer Deleted!\n                    </Alert>\n                </Snackbar>\n                {/*<Alert onClose={this.closeSnackBar} severity=\"success\" action={*/}\n                {/*    <Button color=\"inherit\" size=\"small\" onClick={this.undoDelete}>*/}\n                {/*        Undo*/}\n                {/*    </Button>*/}\n                {/*}>*/}\n                {/*    Customer Deleted!*/}\n                {/*</Alert>*/}\n                {/*<Alert severity=\"error\">This is an error message!</Alert>*/}\n                {/*<Alert severity=\"warning\">This is a warning message!</Alert>*/}\n                {/*<Alert severity=\"info\">This is an information message!</Alert>*/}\n                {/*<Alert severity=\"success\" action={*/}\n                {/*    <Button color=\"inherit\" size=\"small\">*/}\n                {/*        Undo*/}\n                {/*    </Button>*/}\n                {/*}>This is a success message!</Alert>*/}\n\n            </div>\n        );\n    }\n}\n\n\nexport default EnquiryForm;","import React from 'react';\nimport './App.css';\nimport EnquiryForm from \"./EnquiryForm\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <EnquiryForm/>\n\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}