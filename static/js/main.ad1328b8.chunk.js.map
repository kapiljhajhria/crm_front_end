{"version":3,"sources":["services/logService.js","services/httpService.js","services/authService.js","services/userService.js","components/CrmHome/index.js","components/common/protectedRoute.jsx","components/Table/index.js","services/customerService.js","components/EnquiryForm/index.js","components/logout.js","components/appBar.jsx","App.js","serviceWorker.js","index.js"],"names":["init","Sentry","dsn","autoSessionTracking","integrations","Integrations","BrowserTracing","tracesSampleRate","log","error","axios","interceptors","response","use","status","logger","console","toast","Promise","reject","get","post","put","delete","setJwt","jwt","defaults","headers","common","apiEndpoint","apiUrl","user","a","http","email","password","data","localStorage","setItem","getJwt","getItem","login","loginWithJwt","logout","removeItem","getCurrentUser","jwtDecode","ex","useStyles","makeStyles","theme","backdrop","zIndex","drawer","color","CrmHome","props","classes","useState","name","rePassword","selectedTab","warning","state","setState","React","open","setOpen","validateEmail","config","api_url","test","logInUser","e","preventDefault","alertMsg","length","alert","authService","updateUser","history","push","signUpUser","trim","handleInputChange","event","target","value","changeTab","tabNo","rest","to","Fragment","className","Paper","Tabs","onChange","ev","aria-label","Tab","label","hidden","TextField","id","variant","type","Button","onClick","Backdrop","CircularProgress","ProtectedRoute","path","Component","component","render","exact","pathname","from","location","table","minWidth","SimpleTable","TableContainer","Table","TableHead","TableRow","TableCell","align","TableBody","tableData","map","row","idx","key","scope","_id","gender","contact","deletingCustList","includes","startIcon","deleteCustomerId","deleteCustomer","customerId","_","require","EnquiryForm","fetchedData","openSnackBar","lastDeletedCustomer","showUndoIndicator","errorBoolsList","setErrorsList","errorsList","concat","showSnackBar","closeSnackBar","reason","createData","customerID","custId","customerDataWithIndex","index","customerService","resp","filter","cust","validateData","tempBoolsList","alertWarning","isNaN","parseInt","join","genderList","updateTableData","tableArray","elementoBeAdded","position","undefined","splice","getCustomerIdAndSaveData","Map","customer","pick","tableDataCopy","customerName","mobNo","fetchFormData","dataList","this","Select","labelId","el","MenuItem","Snackbar","autoHideDuration","onClose","Alert","severity","LogOut","useEffect","MyAppBar","useHistory","AppBar","Toolbar","App","setUser","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.ad1328b8.chunk.js","sourcesContent":["import * as Sentry from \"@sentry/react\";\nimport { Integrations } from \"@sentry/tracing\";\n\nfunction init() {\n  Sentry.init({\n    dsn:\n      \"https://ce625a42c479474d86a00952b0109351@o504500.ingest.sentry.io/5591499\",\n    autoSessionTracking: true,\n    integrations: [new Integrations.BrowserTracing()],\n\n    // We recommend adjusting this value in production, or using tracesSampler\n    // for finer control\n    tracesSampleRate: 1.0,\n  });\n}\n\nfunction log(error) {\n  Sentry.captureException(error);\n  // console.log(error);\n}\n\nexport default {\n  init,\n  log,\n};\n","import axios from \"axios\";\nimport { toast } from \"react-toastify\";\n\nimport logger from \"./logService\";\n\naxios.interceptors.response.use(null, (error) => {\n  const expectedError =\n    error.response &&\n    error.response.status >= 400 &&\n    error.response.status < 500;\n\n  if (!expectedError) {\n    logger.log(error);\n    console.log(\"some other unexp error\", error);\n    toast.error(\"unexpected error occured\");\n  }\n\n  return Promise.reject(error);\n});\nfunction setJwt(jwt) {\n  axios.defaults.headers.common[\"x-auth-token\"] = jwt;\n}\nexport default {\n  get: axios.get,\n  post: axios.post,\n  put: axios.put,\n  delete: axios.delete,\n  setJwt,\n};\n","import http from \"./httpService\";\nimport jwtDecode from \"jwt-decode\";\nimport { apiUrl } from \"../config.json\";\n\nconst apiEndpoint = apiUrl + \"/auth\";\nconst tokenKey = \"token\";\n\nhttp.setJwt(getJwt());\nexport async function login(user) {\n  const { data: jwt } = await http.post(apiEndpoint, {\n    email: user.email,\n    password: user.password,\n  });\n  localStorage.setItem(tokenKey, jwt);\n}\n\nexport function loginWithJwt(jwt) {\n  localStorage.setItem(tokenKey, jwt);\n}\n\nexport function logout() {\n  localStorage.removeItem(tokenKey);\n}\n\nexport function getCurrentUser() {\n  try {\n    const jwt = localStorage.getItem(tokenKey);\n    return jwtDecode(jwt);\n  } catch (ex) {\n    return null;\n  }\n}\n\nexport function getJwt() {\n  return localStorage.getItem(tokenKey);\n}\n\nexport default {\n  login,\n  loginWithJwt,\n  logout,\n  getCurrentUser,\n  getJwt,\n};\n","import http from \"./httpService\";\nimport { apiUrl } from \"../config.json\";\n\nconst apiEndpoint = apiUrl + \"/users\";\n\nexport function register(user) {\n  return http.post(apiEndpoint, {\n    email: user.email,\n    password: user.password,\n    name: user.name,\n  });\n}\n","import authService from \"../../services/authService\";\nimport * as userService from \"../../services/userService\";\nimport React, { useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport \"./styles.css\";\nimport Paper from \"@material-ui/core/Paper\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { Button } from \"@material-ui/core\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport config from \"../../config.json\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 1,\n    color: \"#fff\",\n  },\n}));\nconst CrmHome = (props) => {\n  const classes = useStyles();\n  const [state, setState] = useState({\n    email: \"\",\n    name: \"\",\n    password: \"\",\n    rePassword: \"\",\n    selectedTab: 0,\n    warning: \"\",\n  });\n  const [open, setOpen] = React.useState(false);\n  const _apiUrl = config.api_url;\n\n  const clearAllFields = (rest) => {\n    setState({\n      ...state,\n      email: \"\",\n      name: \"\",\n      password: \"\",\n      rePassword: \"\",\n      warning: \"\",\n      ...rest,\n    });\n  };\n\n  const validateEmail = () => {\n    if (/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(state.email)) {\n      return \"\";\n    } else return \"Invalid email\";\n  };\n\n  const matchPasswords = () => {\n    if (state.password !== state.rePassword) return \"passwords don't match\";\n  };\n\n  const logInUser = async (e) => {\n    e.preventDefault();\n    let alertMsg = \"\";\n    if (state.email.length === 0) {\n      alertMsg = \"Please enter an email id\";\n    } else alertMsg = validateEmail();\n\n    if (state.password.length === 0)\n      alertMsg = alertMsg + \"\\n Please enter your password\";\n    if (alertMsg.length !== 0) {\n      alert(alertMsg);\n      return;\n    }\n\n    //make request to login user\n    try {\n      setOpen(true);\n      await authService.login(state);\n      props.updateUser();\n    } catch (ex) {\n      setOpen(false);\n      if (ex.response && ex.response.status === 400) {\n        toast.error(ex.response.data);\n      }\n      return;\n    }\n    if (alertMsg.length !== 0) {\n      alert(alertMsg);\n      return;\n    }\n    setOpen(false);\n    props.history.push(\"/customers\");\n  };\n\n  const signUpUser = async () => {\n    //validate if password matches or not\n    let alertMsg = \"\";\n    if (state.email.length === 0) {\n      alertMsg = \"Please enter an email id\";\n    } else alertMsg = validateEmail();\n\n    if (state.password.length === 0) {\n      alertMsg = alertMsg + \"\\nPlease enter a password\";\n    } else if (state.password !== state.rePassword) {\n      alertMsg = alertMsg + \"\\nPasswords don't match\";\n    }\n\n    if (alertMsg.trim().length !== 0) {\n      alert(alertMsg);\n      return;\n    }\n    //proceed with sending sign up details to server if all fields are filled correctly\n\n    //make request to sign up user\n    try {\n      setOpen(true);\n      const response = await userService.register(state);\n      authService.loginWithJwt(response.headers[\"x-auth-token\"]);\n      props.updateUser();\n      setOpen(false);\n      props.history.push(\"/customers\");\n    } catch (ex) {\n      setOpen(false);\n      if (ex.response && ex.response.status === 400) {\n        toast.error(ex.response.data);\n      }\n      return;\n    }\n    if (alertMsg.length === 0) setState({ ...state, selectedTab: 0 });\n  };\n\n  const handleInputChange = (event) => {\n    setState({\n      ...state,\n      [event.target.name]: event.target.value,\n    });\n  };\n  const changeTab = (tabNo) => {\n    setState({\n      ...state,\n      selectedTab: tabNo,\n    });\n    clearAllFields({ selectedTab: tabNo });\n  };\n\n  if (authService.getCurrentUser()) return <Redirect to=\"/customers\" />;\n  return (\n    <React.Fragment>\n      <ToastContainer />\n      <div className={\"crmHome-main\"}>\n        <div className=\"crmHome-title\">Best CRM App</div>\n        <Paper className={\"paperForm\"}>\n          <Tabs\n            value={state.selectedTab}\n            onChange={(ev, tabNo) => changeTab(tabNo)}\n            aria-label=\"simple tabs example\"\n          >\n            <Tab label=\"LOGIN\" />\n            <Tab label=\"SIGN UP\" />\n          </Tabs>\n\n          <div className=\"loginView tabView\" hidden={state.selectedTab === 1}>\n            <TextField\n              name=\"email\"\n              id=\"logIn-email\"\n              label=\"email\"\n              variant=\"outlined\"\n              onChange={handleInputChange}\n              value={state.email}\n            />\n\n            <TextField\n              name=\"password\"\n              id=\"logIn-password\"\n              label=\"password\"\n              variant=\"outlined\"\n              type={\"password\"}\n              onChange={handleInputChange}\n              value={state.password}\n            />\n\n            <Button\n              color=\"primary\"\n              variant=\"contained\"\n              onClick={(e) => logInUser(e)}\n            >\n              log in\n            </Button>\n          </div>\n          <div className=\"signupView tabView\" hidden={state.selectedTab === 0}>\n            <TextField\n              name=\"name\"\n              id=\"signup-name\"\n              label=\"name\"\n              variant=\"outlined\"\n              onChange={handleInputChange}\n              value={state.name}\n              // error={errorBoolsList[0]}\n            />\n            <TextField\n              name=\"email\"\n              id=\"signUp-email\"\n              label=\"email\"\n              variant=\"outlined\"\n              onChange={handleInputChange}\n              value={state.email}\n              // error={errorBoolsList[0]}\n            />\n\n            <TextField\n              name=\"password\"\n              id=\"signUp-password\"\n              label=\"password\"\n              variant=\"outlined\"\n              type={\"password\"}\n              onChange={handleInputChange}\n              value={state.password}\n            />\n\n            <TextField\n              name=\"rePassword\"\n              id=\"signUp-rePassword\"\n              label=\"password\"\n              variant=\"outlined\"\n              type={\"password\"}\n              onChange={handleInputChange}\n              value={state.rePassword}\n            />\n\n            <Button\n              color=\"primary\"\n              variant=\"contained\"\n              onClick={() => signUpUser()}\n            >\n              Sign Up\n            </Button>\n          </div>\n        </Paper>\n      </div>\n      <Backdrop className={classes.backdrop} open={open}>\n        <CircularProgress color=\"inherit\" />\n      </Backdrop>\n    </React.Fragment>\n  );\n};\n\nexport default CrmHome;\n","import React from \"react\";\nimport authService from \"../../services/authService\";\nimport { Route, Redirect } from \"react-router-dom\";\n\nconst ProtectedRoute = ({ path, component: Component, render, ...rest }) => {\n  return (\n    <Route\n      exact\n      {...rest}\n      render={(props) => {\n        if (!authService.getCurrentUser())\n          return (\n            <Redirect\n              to={{\n                pathname: \"/\",\n                state: { from: props.location },\n              }}\n            />\n          );\n        return Component ? <Component {...props} /> : render(props);\n      }}\n    />\n  );\n};\nexport default ProtectedRoute;\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n\n\nconst useStyles = makeStyles({\n    table: {\n        minWidth: 650,\n    },\n});\n\n\nexport default function SimpleTable(props) {\n    const classes = useStyles();\n    // function deleteCustomerId(custId){\n    //     console.log(\"deleting stuff id:\"+custId);\n    //     let tableDataCopy = [].concat(props.tableData)\n    //     let indexOfCust=tableDataCopy.findIndex((cust)=>cust.custId===custId);\n    //     console.log(\"found index:\"+indexOfCust)\n    //     tableDataCopy.splice(indexOfCust,1);\n    //     localStorage.setItem('myData', JSON.stringify(tableDataCopy));\n    //\n    // }\n    return (\n        <TableContainer component={Paper}>\n            {/*{console.log(props)}*/}\n            <Table className={classes.table} aria-label=\"simple table\">\n                <TableHead>\n                    <TableRow>\n                        <TableCell>Customer ID</TableCell>\n                        <TableCell align=\"right\">Name</TableCell>\n                        <TableCell align=\"right\">Gender</TableCell>\n                        <TableCell align=\"right\">Contact No</TableCell>\n                        <TableCell align=\"right\">Remove?</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {props.tableData.map((row,idx) => (\n                        <TableRow key={row.name}>\n                            <TableCell component=\"th\" scope=\"row\">\n                                {row._id}\n                            </TableCell>\n                            <TableCell align=\"right\">{row.name}</TableCell>\n                            <TableCell align=\"right\">{row.gender}</TableCell>\n                            <TableCell align=\"right\">{row.contact}</TableCell>\n                            <TableCell align=\"right\">{props.deletingCustList.includes(row._id) ? <div>\n                                <CircularProgress color=\"secondary\"/></div> : <Button\n                                variant=\"contained\"\n                                color=\"secondary\"\n                                className={\"deleteBtn\"}\n                                startIcon={<DeleteIcon/>}\n                                onClick={() => {\n                                    props.deleteCustomerId(row._id,idx)\n                                }}\n                            />}</TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n}","import http from \"./httpService\";\nimport { apiUrl } from \"../config.json\";\n\nconst apiEndpoint = apiUrl + \"/customers\";\n\nfunction customerUrl(id) {\n  return `${apiEndpoint}/${id}`;\n}\n\nexport function getCustomers() {\n  return http.get(apiEndpoint);\n}\n\nexport function saveCustomer(customer) {\n  return http.post(apiEndpoint, customer);\n}\n\nexport function deleteCustomer(customerId) {\n  return http.delete(customerUrl(customerId));\n}\n","import React from \"react\";\nimport \"./styles.css\";\nimport { Button } from \"@material-ui/core\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport TextField from \"@material-ui/core/TextField\";\nimport SimpleTable from \"../Table\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport { Alert } from \"@material-ui/lab\";\nimport * as customerService from \"../../services/customerService\";\nconst _ = require(\"lodash\");\nclass EnquiryForm extends React.Component {\n  state = {\n    name: \"\",\n    gender: \"male\",\n    contact: \"\",\n    fetchedData: \"\",\n    tableData: [],\n    deletingCustList: [],\n    openSnackBar: false,\n    lastDeletedCustomer: {},\n    showUndoIndicator: false,\n  };\n\n  errorBoolsList = [false, false];\n\n  constructor(props) {\n    super(props);\n  }\n\n  setErrorsList = (errorsList) => {\n    console.log(\"errorList is:\" + errorsList);\n    this.errorBoolsList = [].concat(errorsList);\n  };\n  showSnackBar = () => {\n    this.setState({ openSnackBar: true });\n  };\n\n  closeSnackBar = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n\n    this.setState({ openSnackBar: false });\n  };\n  createData = (customerID, name, gender, contact) => {\n    return { _id: customerID, name, gender, contact };\n  };\n\n  deleteCustomerId = async (custId, idx) => {\n    let customerDataWithIndex = {};\n    customerDataWithIndex.data = this.state.tableData[idx];\n    customerDataWithIndex.index = idx;\n    //step 1 : add cust id to deleting list, so that indicator can be shown for deleting item\n    this.setState({\n      deletingCustList: this.state.deletingCustList.concat(custId),\n    });\n    console.log(\"deleting custID:\" + custId);\n\n    //step2: remove that customer from local table and also make network request to remove it from server.\n\n    const resp = await customerService.deleteCustomer(custId);\n    console.log(\"customer deleted, resp.data is \", resp.data);\n    this.setState({\n      tableData: this.state.tableData.filter((cust) => cust[\"_id\"] !== custId),\n      deletingCustList: this.state.deletingCustList.filter(\n        (id) => id !== custId\n      ),\n    });\n    console.log(\n      \"main list, deleting id list and last cust deleting list updated using setState, showing snackbar now\" +\n        custId\n    );\n    this.showSnackBar();\n  };\n  validateData = () => {\n    let tempBoolsList = [false, false];\n    let alertWarning = [];\n    if (this.state.name.length === 0) {\n      alertWarning.push(\"Customer Name can't be empty\");\n      tempBoolsList[0] = true;\n    }\n    if (this.state.contact.length === 0) {\n      alertWarning.push(\"Contact number can't be empty\");\n      tempBoolsList[1] = true;\n    }\n    if (isNaN(this.state.contact)) {\n      alertWarning.push(\"Please enter valid mob number\");\n      tempBoolsList[1] = true;\n    }\n    if (`${parseInt(this.state.contact)}`.length !== 10) {\n      alertWarning.push(\"Contact Number needs to be of 10 digit\");\n      tempBoolsList[1] = true;\n    }\n\n    if (alertWarning.length > 0) alert(alertWarning.join(\"\\n\"));\n    this.setErrorsList(tempBoolsList);\n    this.setState();\n    return alertWarning.length === 0;\n  };\n  handleInputChange = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value,\n    });\n  };\n  genderList = [\"male\", \"female\", \"others\", \"prefer not to say\"];\n\n  updateTableData = async (tableArray, elementoBeAdded, position) => {\n    console.log(\n      \"position in new function is: and element to be added is \" + position,\n      elementoBeAdded\n    );\n    // elementoBeAdded._id=elementoBeAdded.customerID\n    if (position === undefined) tableArray.push(elementoBeAdded);\n    else tableArray.splice(position, 0, elementoBeAdded);\n    this.setState({ tableData: tableArray || [], lastDeletedCustomer: {} });\n  };\n  getCustomerIdAndSaveData = async () => {\n    //validate data and show alert window\n    if (!this.validateData()) {\n      this.setState({}, () => this.errorBoolsList);\n      return 0;\n    }\n    this.setState({ fetchedData: null });\n    let custDataMap = new Map();\n    const response = await customerService.saveCustomer(\n      _.pick(this.state, [\"name\", \"contact\", \"gender\"])\n    );\n    console.log(\n      \"response from server after adding another customer is ,\",\n      response\n    );\n    console.log(this.state);\n    // console.log(\"fetched CustomerID is: \" + jsonMap[\"_id\"]);\n\n    let tableDataCopy = [].concat(this.state.tableData);\n    await this.updateTableData(\n      tableDataCopy,\n      this.createData(\n        response.data[\"_id\"],\n        this.state.name,\n        this.state.gender,\n        this.state.contact\n      )\n    );\n    this.setState(\n      {\n        customerName: \"\",\n        gender: \"Male\",\n        mobNo: \"\",\n        fetchedData: \"\",\n      },\n      () => this.errorBoolsList\n    );\n  };\n\n  fetchFormData = async () => {\n    const response = await customerService.getCustomers();\n    let dataList = response.data;\n    this.setState({ tableData: dataList ?? [] });\n  };\n\n  componentDidMount() {\n    console.log(\"mounted\");\n    this.fetchFormData();\n    console.log(\"data from local storage\");\n  }\n\n  render() {\n    return (\n      <div>\n        <Paper className=\"paper\">\n          <form>\n            <div>\n              <TextField\n                name=\"name\"\n                id=\"customerName\"\n                label=\"Customer Name\"\n                variant=\"outlined\"\n                onChange={this.handleInputChange}\n                value={this.state.name}\n                error={this.errorBoolsList[0]}\n              />\n            </div>\n            <div>\n              <TextField\n                name=\"contact\"\n                id=\"mobNo\"\n                label=\"Contact No.\"\n                variant=\"outlined\"\n                onChange={this.handleInputChange}\n                value={this.state.contact}\n                error={this.errorBoolsList[1]}\n              />\n            </div>\n            <div>\n              <Select\n                labelId=\"demo-simple-select-outlined-label\"\n                id=\"demo-simple-select-outlined\"\n                name={\"gender\"}\n                value={this.state.gender}\n                onChange={this.handleInputChange}\n                color=\"secondary\"\n              >\n                {this.genderList.map((el) => (\n                  <MenuItem value={el}>{el}</MenuItem>\n                ))}\n              </Select>\n            </div>\n          </form>\n          {this.state.fetchedData === null ? (\n            <div>\n              <CircularProgress color=\"secondary\" />\n            </div>\n          ) : (\n            <div>\n              <Button\n                color=\"primary\"\n                variant=\"contained\"\n                onClick={() => this.getCustomerIdAndSaveData()}\n              >\n                Save info\n              </Button>\n              {this.state.showUndoIndicator ? (\n                <div>\n                  <CircularProgress color=\"secondary\" />\n                </div>\n              ) : (\n                \"\"\n              )}\n            </div>\n          )}\n        </Paper>\n        {this.state.tableData.length !== 0 ? (\n          <SimpleTable\n            className=\"simpleTable\"\n            tableData={this.state.tableData}\n            deletingCustList={this.state.deletingCustList}\n            deleteCustomerId={(custId, idx) =>\n              this.deleteCustomerId(custId, idx)\n            }\n          />\n        ) : (\n          \"\"\n        )}\n        <Snackbar\n          open={this.state.openSnackBar}\n          autoHideDuration={3000}\n          onClose={this.closeSnackBar}\n        >\n          <Alert onClose={this.closeSnackBar} severity=\"success\">\n            Customer Deleted!\n          </Alert>\n        </Snackbar>\n      </div>\n    );\n  }\n}\n\nexport default EnquiryForm;\n","import React, { Component, useEffect } from \"react\";\n\nexport default function LogOut() {\n  useEffect(() => {\n    localStorage.removeItem(\"token\");\n  }, []);\n  return null;\n}\n","import React from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport { Button } from \"@material-ui/core\";\nimport authService from \"../services/authService\";\nimport { useHistory } from \"react-router-dom\";\n\nconst MyAppBar = (props) => {\n  const history = useHistory();\n\n  async function logOutUser() {\n    authService.logout();\n    props.updateUser();\n    history.push(\"/\");\n  }\n  return (\n    <AppBar position=\"static\" className={\"topAppBar\"}>\n      <Toolbar className={\"appBar-toolBar\"}>\n        {props.user ? (\n          <Button color=\"inherit\" onClick={logOutUser}>\n            Logout\n          </Button>\n        ) : (\n          \"\"\n        )}\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default MyAppBar;\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport CrmHome from \"./components/CrmHome/index\";\nimport ProtectedRoute from \"./components/common/protectedRoute\";\nimport { Route, Switch, useHistory } from \"react-router-dom\";\nimport EnquiryForm from \"./components/EnquiryForm/index\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport LogOut from \"./components/logout\";\nimport authService from \"./services/authService\";\nimport MyAppBar from \"./components/appBar\";\n\nfunction App(props) {\n  const [user, setUser] = useState({});\n\n  const updateUser = () => {\n    const user = authService.getCurrentUser();\n    setUser(user);\n  };\n\n  useEffect(() => {\n    updateUser();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      {/* <userContext> */}\n      <MyAppBar user={user} updateUser={updateUser} />\n      {/* </userContext> */}\n\n      <header className=\"App-header\">\n        <Switch>\n          <ProtectedRoute exact path={\"/customers\"} component={EnquiryForm} />\n\n          <Route\n            path=\"/\"\n            render={(props) => <CrmHome {...props} updateUser={updateUser} />}\n          />\n          <Route path={\"/logout\"} component={LogOut} />\n          {/*<Route path={\"/reactForms\"} component={CrmHome}/>*/}\n        </Switch>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport logger from \"./services/logService\";\n\nlogger.init();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}