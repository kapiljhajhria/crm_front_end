{"version":3,"sources":["CrmHome/index.js","Table/index.js","EnquiryForm/index.js","App.js","serviceWorker.js","index.js"],"names":["CrmHome","state","email","pswd","rePswd","selectedTab","warning","clearAllFields","setState","validateEmail","test","logInUser","e","a","preventDefault","alertMsg","length","alert","makePostRequest","jsonMap","result","props","history","push","signUpUser","trim","userSignUpDetails","Map","console","log","url","dataAsMap","fetch","method","headers","credentials","body","JSON","stringify","response","json","handleInputChange","event","target","name","value","changeTab","tabNo","this","className","Paper","Tabs","onChange","ev","aria-label","Tab","label","hidden","TextField","id","variant","type","Button","color","onClick","React","Component","useStyles","makeStyles","table","minWidth","SimpleTable","classes","TableContainer","component","Table","TableHead","TableRow","TableCell","align","TableBody","tableData","map","row","key","scope","_id","gender","contact","deletingCustList","includes","CircularProgress","startIcon","deleteCustomerId","EnquiryForm","customerName","mobNo","fetchedData","openSnackBar","lastDeletedCustomer","showUndoIndicator","errorBoolsList","setErrorsList","errorsList","concat","showSnackBar","closeSnackBar","reason","createData","customerID","custId","deletedCustomerID","filter","cust","validateData","tempBoolsList","alertWarning","isNaN","parseInt","join","genderList","undoDelete","deleteMap","res","tableDataCopy","deletingCustListCopy","custIdBeingDeleted","updateTableData","tableArray","elementoBeAdded","position","undefined","splice","getCustomerId","custDataMap","fetchFormData","resp","status","dataList","error","Select","labelId","el","MenuItem","Snackbar","open","autoHideDuration","onClose","Alert","severity","action","size","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.d5eed97d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './styles.css'\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\n\r\n\r\nexport default class CrmHome extends React.Component {\r\n    state = {\r\n        email: \"\",\r\n        pswd: \"\",\r\n        rePswd: \"\",\r\n        selectedTab: 0,\r\n        warning: \"\"\r\n\r\n    };\r\n    clearAllFields = () => {\r\n        this.setState({\r\n            email: \"\",\r\n            pswd: \"\",\r\n            rePswd: \"\",\r\n            warning: \"\"\r\n        })\r\n    }\r\n\r\n    validateEmail = () => {\r\n        if (/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(this.state.email)) {\r\n            return \"\"\r\n        } else return \"Invalid email\"\r\n\r\n    }\r\n\r\n    matchPasswords() {\r\n        if (this.state.pswd !== this.state.rePswd)\r\n            return \"passwords don't match\"\r\n    }\r\n\r\n    logInUser = async (e) => {\r\n        e.preventDefault();\r\n        let alertMsg = \"\";\r\n        if (this.state.email.length === 0) {\r\n            alertMsg = \"Please enter an email id\"\r\n        } else\r\n            alertMsg = this.validateEmail()\r\n\r\n        if (this.state.pswd.length === 0)\r\n            alertMsg = alertMsg + \"\\n Please enter your password\"\r\n        if (alertMsg.length !== 0) {\r\n            alert(alertMsg)\r\n            return;\r\n        }\r\n\r\n        let jsonMap = await this.makePostRequest('http://localhost:5000/login', {\r\n            \"email\": this.state.email,\r\n            \"pswd\": this.state.pswd\r\n        });\r\n        if (jsonMap.result === \"noEmail\") {\r\n            alertMsg = \"Email id doesn't exist, please sign up first\"\r\n        } else if (jsonMap.result === \"passwordError\") {\r\n            alertMsg = \"wrong password, please check your password\"\r\n        } else if (jsonMap.result === \"loggedIn\") {\r\n            // alertMsg=\"loggedIN\"\r\n            this.props.history.push('/customers')\r\n        }\r\n\r\n        if (alertMsg.length !== 0) {\r\n            alert(alertMsg)\r\n            return;\r\n        }\r\n\r\n    }\r\n    signUpUser = async () => {\r\n        //validate if password matches or not\r\n        let alertMsg = \"\";\r\n        if (this.state.email.length === 0) {\r\n            alertMsg = \"Please enter an email id\"\r\n        } else\r\n            alertMsg = this.validateEmail()\r\n\r\n        if (this.state.pswd.length === 0) {\r\n            alertMsg = alertMsg + \"\\nPlease enter a password\"\r\n        } else if (this.state.pswd !== this.state.rePswd) {\r\n            alertMsg = alertMsg + \"\\nPasswords don't match\"\r\n        }\r\n\r\n\r\n        if (alertMsg.trim().length !== 0) {\r\n            alert(alertMsg)\r\n            return;\r\n        }\r\n        //proceed with sending sign up details to server if all fields are filled correctly\r\n\r\n        let userSignUpDetails = new Map();\r\n        userSignUpDetails[\"email\"] = this.state.email;\r\n        userSignUpDetails[\"pswd\"] = this.state.pswd;\r\n        let jsonMap = await this.makePostRequest('http://localhost:5000/signup', userSignUpDetails);\r\n        // and then take user to login tab\r\n        console.log(\"response of sign up post request\")\r\n        console.log(jsonMap)\r\n        if (jsonMap.result === \"failed\")\r\n            alertMsg = \"failed to sign up, please try again\"\r\n        if (jsonMap.result === \"duplicateEmail\")\r\n            alertMsg = \"Email id already, exist, please use another email id  or reset password\"\r\n        if (alertMsg.trim().length !== 0) {\r\n            alert(alertMsg)\r\n            return;\r\n        }\r\n        if (alertMsg.length === 0)\r\n            this.setState({selectedTab: 0})\r\n    }\r\n    makePostRequest = async (url, dataAsMap) => {\r\n        let response = await fetch(url, {\r\n            method: 'POST',\r\n            headers: {'Content-Type': 'application/json'},\r\n            credentials: \"include\",\r\n            body: JSON.stringify(dataAsMap)\r\n        })\r\n        let jsonMap = await response.json();\r\n        return jsonMap;\r\n    }\r\n\r\n    handleInputChange = (event) => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        })\r\n    }\r\n    changeTab = (tabNo) => {\r\n        this.setState({\r\n            selectedTab: tabNo\r\n        })\r\n        this.clearAllFields();\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className={\"crmHome-main\"}>\r\n                <div className=\"crmHome-title\">\r\n                    Best CRM App\r\n                </div>\r\n                <Paper className={\"paperForm\"}>\r\n                    <Tabs value={this.state.selectedTab} onChange={(ev, tabNo) => this.changeTab(tabNo)}\r\n                          aria-label=\"simple tabs example\">\r\n                        <Tab label=\"LOGIN\"/>\r\n                        <Tab label=\"SIGN UP\"/>\r\n                    </Tabs>\r\n\r\n                    <div className=\"loginView tabView\" hidden={this.state.selectedTab !== 0}>\r\n                        <TextField name=\"email\" id=\"logIn-email\" label=\"email\" variant=\"outlined\"\r\n                                   onChange={this.handleInputChange} value={this.state.email}/>\r\n\r\n                        <TextField name=\"pswd\" id=\"logIn-pswd\" label=\"password\" variant=\"outlined\" type={\"password\"}\r\n                                   onChange={this.handleInputChange} value={this.state.pswd}/>\r\n\r\n                        <Button color=\"primary\" variant=\"contained\"\r\n                                onClick={(e) => this.logInUser(e)}>log in\r\n                        </Button>\r\n                    </div>\r\n                    <div className=\"signupView tabView\" hidden={this.state.selectedTab !== 1}>\r\n                        <TextField name=\"email\" id=\"signUp-email\" label=\"email\" variant=\"outlined\"\r\n                                   onChange={this.handleInputChange} value={this.state.email}\r\n                            // error={this.errorBoolsList[0]}\r\n                        />\r\n\r\n                        <TextField name=\"pswd\" id=\"signUp-pswd\" label=\"password\" variant=\"outlined\" type={\"password\"}\r\n                                   onChange={this.handleInputChange} value={this.state.pswd}/>\r\n\r\n                        <TextField name=\"rePswd\" id=\"signUpRe-pswd\" label=\"password\" variant=\"outlined\"\r\n                                   type={\"password\"}\r\n                                   onChange={this.handleInputChange} value={this.state.rePswd}/>\r\n\r\n                        <Button color=\"primary\" variant=\"contained\"\r\n                                onClick={() => this.signUpUser()}>Sign Up\r\n                        </Button>\r\n                    </div>\r\n                </Paper>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n\n\nconst useStyles = makeStyles({\n    table: {\n        minWidth: 650,\n    },\n});\n\n\nexport default function SimpleTable(props) {\n    const classes = useStyles();\n    // function deleteCustomerId(custId){\n    //     console.log(\"deleting stuff id:\"+custId);\n    //     let tableDataCopy = [].concat(props.tableData)\n    //     let indexOfCust=tableDataCopy.findIndex((cust)=>cust.custId===custId);\n    //     console.log(\"found index:\"+indexOfCust)\n    //     tableDataCopy.splice(indexOfCust,1);\n    //     localStorage.setItem('myData', JSON.stringify(tableDataCopy));\n    //\n    // }\n    return (\n        <TableContainer component={Paper}>\n            {/*{console.log(props)}*/}\n            <Table className={classes.table} aria-label=\"simple table\">\n                <TableHead>\n                    <TableRow>\n                        <TableCell>Customer ID</TableCell>\n                        <TableCell align=\"right\">Name</TableCell>\n                        <TableCell align=\"right\">Gender</TableCell>\n                        <TableCell align=\"right\">Contact No</TableCell>\n                        <TableCell align=\"right\">Remove?</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {props.tableData.map((row) => (\n                        <TableRow key={row.name}>\n                            <TableCell component=\"th\" scope=\"row\">\n                                {row._id}\n                            </TableCell>\n                            <TableCell align=\"right\">{row.name}</TableCell>\n                            <TableCell align=\"right\">{row.gender}</TableCell>\n                            <TableCell align=\"right\">{row.contact}</TableCell>\n                            <TableCell align=\"right\">{props.deletingCustList.includes(row._id) ? <div>\n                                <CircularProgress color=\"secondary\"/></div> : <Button\n                                variant=\"contained\"\n                                color=\"secondary\"\n                                className={\"deleteBtn\"}\n                                startIcon={<DeleteIcon/>}\n                                onClick={() => {\n                                    props.deleteCustomerId(row._id)\n                                }}\n                            />}</TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n}","import React from \"react\";\nimport './styles.css'\nimport {Button} from '@material-ui/core';\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport TextField from \"@material-ui/core/TextField\";\nimport SimpleTable from \"../Table\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport {Alert} from '@material-ui/lab';\n\nclass EnquiryForm extends React.Component {\n    state = {\n        customerName: '',\n        gender: \"Male\",\n        mobNo: \"\",\n        fetchedData: \"\",\n        tableData: [],\n        deletingCustList: [],\n        openSnackBar: false,\n        lastDeletedCustomer: [],\n        showUndoIndicator: false\n    };\n\n    errorBoolsList = [false, false];\n\n    constructor(props) {\n        super(props);\n\n    }\n\n    setErrorsList = (errorsList) => {\n        console.log(\"errorList is:\" + errorsList)\n        this.errorBoolsList = [].concat(errorsList);\n    }\n    showSnackBar = () => {\n        this.setState({openSnackBar: true});\n    };\n\n    closeSnackBar = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n\n        this.setState({openSnackBar: false});\n    };\n    createData = (customerID, name, gender, contact,) => {\n        return {customerID, name, gender, contact,}\n    }\n\n    deleteCustomerId = async (custId) => {\n        //step 1 : add cust id to deleting list, so that indicator can be shown for deleting item\n        this.setState({deletingCustList: this.state.deletingCustList.concat(custId)})\n        console.log(\"deleting custID:\" + custId);\n\n        //step2: remove that customer from local table and also make network request to remove it from server.\n\n        let res = await this.makePostRequest(\"http://localhost:5000/deleteCustomer\", {\n            customerID: custId,\n        })\n        let deletedCustomerID = custId;\n        console.log(\"deleting custID from network, now updating local variables:\" + custId);\n        this.setState({\n            lastDeletedCustomer: deletedCustomerID,\n            tableData: this.state.tableData.filter((cust) => cust[\"_id\"] != custId),\n            deletingCustList: this.state.deletingCustList.filter((id) => id !== custId)\n        });\n        console.log(\"main list, deleting id list and last cust deleting list updated using setState, showing snackbar now\" + custId);\n        this.showSnackBar();\n    }\n    validateData = () => {\n        let tempBoolsList = [false, false];\n        let alertWarning = [];\n        if (this.state.customerName.length === 0) {\n            alertWarning.push(\"Customer Name can't be empty\");\n            tempBoolsList[0] = true;\n        }\n        if (this.state.mobNo.length === 0) {\n            alertWarning.push(\"Contact number can't be empty\");\n            tempBoolsList[1] = true;\n        }\n        if (isNaN(this.state.mobNo)) {\n            alertWarning.push(\"Please enter valid mob number\");\n            tempBoolsList[1] = true;\n        }\n        if (`${parseInt(this.state.mobNo)}`.length !== 10) {\n            alertWarning.push(\"Contact Number needs to be of 10 digit\");\n            tempBoolsList[1] = true;\n        }\n\n        if (alertWarning.length > 0)\n            alert(alertWarning.join(\"\\n\"));\n        this.setErrorsList(tempBoolsList);\n        this.setState();\n        return alertWarning.length === 0\n    }\n    handleInputChange = (event) => {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n    genderList = [\"Male\", \"Female\", \"Rather Not Say\", \"Others\"];\n    undoDelete = async () => {\n        this.closeSnackBar();\n        this.setState({showUndoIndicator: true})\n        let deleteMap = new Map();\n        deleteMap[\"customerID\"] = this.state.lastDeletedCustomer;\n        let res = await this.makePostRequest(\"http://localhost:5000/undoDelete\", deleteMap)\n        console.log(\"res from undo\" + JSON.stringify(res))\n        let tableDataCopy = [].concat(this.state.tableData);\n        let deletingCustListCopy = [].concat(this.state.deletingCustList);\n        deletingCustListCopy = deletingCustListCopy.filter((custId) => res[\"deletedCustomer\"][\"customerID\"] !== custId)\n        this.setState({custIdBeingDeleted: deletingCustListCopy});\n        await this.updateTableData(tableDataCopy, res[\"deletedCustomer\"], res[\"deletedCustomerIndex\"])\n        this.setState({showUndoIndicator: false})\n    }\n\n    updateTableData = async (tableArray, elementoBeAdded, position) => {\n        console.log(\"position in new function is:\" + position)\n        if (position === undefined)\n            tableArray.push(elementoBeAdded)\n        else\n            tableArray.splice(position, 0, elementoBeAdded);\n        this.setState({tableData: tableArray, lastDeletedCustomer: []});\n    }\n    getCustomerId = async () => {\n        if (!this.validateData()) {\n            this.setState({}, () => this.errorBoolsList);\n            return 0;\n        }\n        this.setState({fetchedData: null});\n        let custDataMap = new Map();\n        custDataMap[\"name\"] = this.state.customerName;\n        custDataMap[\"gender\"] = this.state.gender;\n        custDataMap[\"contact\"] = this.state.mobNo;\n        let jsonMap = await this.makePostRequest('http://localhost:5000/', custDataMap);\n        this.setState({fetchedData: jsonMap['customerID']});\n        console.log(this.state);\n        console.log(\"fetched CustomerID is: \" + jsonMap['customerID']);\n\n        let tableDataCopy = [].concat(this.state.tableData);\n        await this.updateTableData(tableDataCopy, this.createData(jsonMap['customerID'], this.state.customerName, this.state.gender, this.state.mobNo))\n        this.setState({\n            customerName: '',\n            gender: \"Male\",\n            mobNo: \"\",\n            fetchedData: \"\",\n        }, () => this.errorBoolsList)\n    }\n\n    makePostRequest = async (url, dataAsMap) => {\n        let response = await fetch(url, {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json',},\n            credentials: \"include\",\n            body: JSON.stringify(dataAsMap)\n        })\n        let jsonMap = await response.json();\n        return jsonMap;\n    }\n    fetchFormData = async () => {\n        let resp = await fetch(\"http://localhost:5000/customers\", {credentials: \"include\",});\n        if (resp.status === 403) {\n            alert(\"You need to login to view this page\")\n            this.props.history.push('/')\n            console.log(\"gone to home page\")\n        }\n        let dataList = await resp.json();\n        this.setState({tableData: dataList ?? []})\n        // return JSON.parse(resp.body);\n    }\n\n    componentDidMount() {\n        console.log(\"mounted\")\n        this.fetchFormData();\n        console.log(\"data from local storage\");\n    }\n\n    render() {\n\n        return (\n            <div>\n                <Paper className=\"paper\">\n                    <form>\n                        <div>\n                            <TextField name=\"customerName\" id=\"customerName\" label=\"Customer Name\" variant=\"outlined\"\n                                       onChange={this.handleInputChange} value={this.state.customerName}\n                                       error={this.errorBoolsList[0]}\n                            />\n                        </div>\n                        <div>\n                            <TextField name=\"mobNo\" id=\"mobNo\" label=\"Contact No.\" variant=\"outlined\"\n                                       onChange={this.handleInputChange} value={this.state.mobNo}\n                                       error={this.errorBoolsList[1]}/>\n\n                        </div>\n                        <div>\n\n\n                            <Select\n                                labelId=\"demo-simple-select-outlined-label\"\n                                id=\"demo-simple-select-outlined\"\n                                name={\"gender\"}\n                                value={this.state.gender}\n                                onChange={this.handleInputChange}\n                                color=\"secondary\"\n                            >\n                                {this.genderList.map((el) =>\n                                    (<MenuItem value={el}>{el}</MenuItem>)\n                                )}\n                            </Select>\n\n                        </div>\n\n                    </form>\n                    {this.state.fetchedData === null ? <div>\n                            <CircularProgress color=\"secondary\"/></div> :\n                        <div>\n                            <Button color=\"primary\" variant=\"contained\" onClick={() => this.getCustomerId()}>Save info\n                            </Button>\n                            {this.state.showUndoIndicator ? <div>\n                                <CircularProgress color=\"secondary\"/></div> : \"\"}\n                        </div>}\n                </Paper>\n                {this.state.tableData.length !== 0 ?\n                    <SimpleTable className=\"simpleTable\" tableData={this.state.tableData}\n                                 deletingCustList={this.state.deletingCustList}\n                                 deleteCustomerId={(custId) => this.deleteCustomerId(custId)}/> : \"\"}\n                <Snackbar open={this.state.openSnackBar} autoHideDuration={3000} onClose={this.closeSnackBar}>\n                    <Alert onClose={this.closeSnackBar} severity=\"success\" action={\n                        <Button color=\"inherit\" size=\"small\" onClick={this.undoDelete}>\n                            Undo\n                        </Button>\n                    }>\n                        Customer Deleted!\n                    </Alert>\n                </Snackbar>\n            </div>\n        );\n    }\n}\n\n\nexport default EnquiryForm;","import React from 'react';\nimport './App.css';\nimport CrmHome from \"./CrmHome\";\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\nimport EnquiryForm from \"./EnquiryForm\";\n\nfunction App() {\n    return (\n        <Router>\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <Switch>\n\n                        <Route exact path={\"/customers\"} component={EnquiryForm}/>\n\n                        <Route path={\"/\"} component={CrmHome}/>\n                        {/*<Route path={\"/reactForms\"} component={CrmHome}/>*/}\n\n                    </Switch>\n                </header>\n            </div>\n        </Router>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}