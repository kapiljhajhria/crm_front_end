{"version":3,"sources":["services/logService.js","services/httpService.js","services/authService.js","services/userService.js","components/CrmHome/index.js","components/common/protectedRoute.jsx","components/Table/index.js","services/customerService.js","components/EnquiryForm/index.js","components/logout.js","App.js","serviceWorker.js","index.js"],"names":["init","log","error","console","axios","interceptors","response","use","status","logger","toast","Promise","reject","get","post","put","delete","setJwt","jwt","defaults","headers","common","apiEndpoint","apiUrl","user","a","http","email","password","data","localStorage","setItem","getJwt","getItem","login","loginWithJwt","logout","removeItem","getCurrentUser","jwtDecode","ex","register","name","CrmHome","state","rePassword","selectedTab","warning","_apiUrl","config","api_url","clearAllFields","setState","validateEmail","test","logInUser","e","preventDefault","alertMsg","length","alert","authService","window","location","signUpUser","trim","userService","handleInputChange","event","target","value","changeTab","tabNo","this","to","Fragment","className","Paper","Tabs","onChange","ev","aria-label","Tab","label","hidden","TextField","id","variant","type","Button","color","onClick","React","Component","ProtectedRoute","path","component","render","rest","exact","props","pathname","from","useStyles","makeStyles","table","minWidth","SimpleTable","classes","TableContainer","Table","TableHead","TableRow","TableCell","align","TableBody","tableData","map","row","idx","key","scope","_id","gender","contact","deletingCustList","includes","CircularProgress","startIcon","deleteCustomerId","deleteCustomer","customerId","_","require","EnquiryForm","fetchedData","openSnackBar","lastDeletedCustomer","showUndoIndicator","errorBoolsList","setErrorsList","errorsList","concat","showSnackBar","closeSnackBar","reason","createData","customerID","custId","customerDataWithIndex","index","customerService","resp","filter","cust","validateData","tempBoolsList","alertWarning","push","isNaN","parseInt","join","genderList","updateTableData","tableArray","elementoBeAdded","position","undefined","splice","getCustomerIdAndSaveData","Map","customer","pick","tableDataCopy","customerName","mobNo","fetchFormData","dataList","Select","labelId","el","MenuItem","Snackbar","open","autoHideDuration","onClose","Alert","severity","LogOut","useEffect","App","useHistory","useState","setUser","AppBar","Toolbar","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.498c182e.chunk.js","sourcesContent":["import * as Sentry from \"@sentry/react\";\nimport { Integrations } from \"@sentry/tracing\";\n\nfunction init() {\n  // Sentry.init({\n  //   dsn:\n  //     \"https://ce625a42c479474d86a00952b0109351@o504500.ingest.sentry.io/5591499\",\n  //   autoSessionTracking: true,\n  //   integrations: [new Integrations.BrowserTracing()],\n  //   // We recommend adjusting this value in production, or using tracesSampler\n  //   // for finer control\n  //   tracesSampleRate: 1.0,\n  // });\n}\n\nfunction log(error) {\n  // Sentry.captureException(error);\n  console.log(error);\n}\n\nexport default {\n  init,\n  log,\n};\n","import axios from \"axios\";\nimport { toast } from \"react-toastify\";\n\nimport logger from \"./logService\";\n\naxios.interceptors.response.use(null, (error) => {\n  const expectedError =\n    error.response &&\n    error.response.status >= 400 &&\n    error.response.status < 500;\n\n  if (!expectedError) {\n    logger.log(error);\n    console.log(\"some other unexp error\", error);\n    toast.error(\"unexpected error occured\");\n  }\n\n  return Promise.reject(error);\n});\nfunction setJwt(jwt) {\n  axios.defaults.headers.common[\"x-auth-token\"] = jwt;\n}\nexport default {\n  get: axios.get,\n  post: axios.post,\n  put: axios.put,\n  delete: axios.delete,\n  setJwt,\n};\n","import http from \"./httpService\";\nimport jwtDecode from \"jwt-decode\";\nimport { apiUrl } from \"../config.json\";\n\nconst apiEndpoint = apiUrl + \"/auth\";\nconst tokenKey = \"token\";\n\nhttp.setJwt(getJwt());\nexport async function login(user) {\n  const { data: jwt } = await http.post(apiEndpoint, {\n    email: user.email,\n    password: user.password,\n  });\n  localStorage.setItem(tokenKey, jwt);\n}\n\nexport function loginWithJwt(jwt) {\n  localStorage.setItem(tokenKey, jwt);\n}\n\nexport function logout() {\n  localStorage.removeItem(tokenKey);\n}\n\nexport function getCurrentUser() {\n  try {\n    const jwt = localStorage.getItem(tokenKey);\n    return jwtDecode(jwt);\n  } catch (ex) {\n    return null;\n  }\n}\n\nexport function getJwt() {\n  return localStorage.getItem(tokenKey);\n}\n\nexport default {\n  login,\n  loginWithJwt,\n  logout,\n  getCurrentUser,\n  getJwt,\n};\n","import http from \"./httpService\";\nimport { apiUrl } from \"../config.json\";\n\nconst apiEndpoint = apiUrl + \"/users\";\n\nexport function register(user) {\n  return http.post(apiEndpoint, {\n    email: user.email,\n    password: user.password,\n    name: user.name,\n  });\n}\n","import authService from \"../../services/authService\";\nimport * as userService from \"../../services/userService\";\nimport React from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport \"./styles.css\";\nimport Paper from \"@material-ui/core/Paper\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { Button } from \"@material-ui/core\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport config from \"../../config.json\";\nimport { ToastContainer, toast } from \"react-toastify\";\n\nexport default class CrmHome extends React.Component {\n  state = {\n    email: \"\",\n    name: \"\",\n    password: \"\",\n    rePassword: \"\",\n    selectedTab: 0,\n    warning: \"\",\n  };\n\n  _apiUrl = config.api_url;\n\n  clearAllFields = () => {\n    this.setState({\n      email: \"\",\n      name: \"\",\n      password: \"\",\n      rePassword: \"\",\n      warning: \"\",\n    });\n  };\n\n  validateEmail = () => {\n    if (\n      /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(this.state.email)\n    ) {\n      return \"\";\n    } else return \"Invalid email\";\n  };\n\n  matchPasswords() {\n    if (this.state.password !== this.state.rePassword)\n      return \"passwords don't match\";\n  }\n\n  logInUser = async (e) => {\n    e.preventDefault();\n    let alertMsg = \"\";\n    if (this.state.email.length === 0) {\n      alertMsg = \"Please enter an email id\";\n    } else alertMsg = this.validateEmail();\n\n    if (this.state.password.length === 0)\n      alertMsg = alertMsg + \"\\n Please enter your password\";\n    if (alertMsg.length !== 0) {\n      alert(alertMsg);\n      return;\n    }\n\n    //make request to login user\n    try {\n      await authService.login(this.state);\n    } catch (ex) {\n      if (ex.response && ex.response.status === 400) {\n        toast.error(ex.response.data);\n      }\n      return;\n    }\n    if (alertMsg.length !== 0) {\n      alert(alertMsg);\n      return;\n    }\n    window.location = \"/customers\";\n    // this.props.history.push(\"/customers\");\n  };\n\n  signUpUser = async () => {\n    //validate if password matches or not\n    let alertMsg = \"\";\n    if (this.state.email.length === 0) {\n      alertMsg = \"Please enter an email id\";\n    } else alertMsg = this.validateEmail();\n\n    if (this.state.password.length === 0) {\n      alertMsg = alertMsg + \"\\nPlease enter a password\";\n    } else if (this.state.password !== this.state.rePassword) {\n      alertMsg = alertMsg + \"\\nPasswords don't match\";\n    }\n\n    if (alertMsg.trim().length !== 0) {\n      alert(alertMsg);\n      return;\n    }\n    //proceed with sending sign up details to server if all fields are filled correctly\n\n    //make request to sign up user\n    try {\n      const response = await userService.register(this.state);\n      authService.loginWithJwt(response.headers[\"x-auth-token\"]);\n      window.location = \"/customers\";\n    } catch (ex) {\n      if (ex.response && ex.response.status === 400) {\n        toast.error(ex.response.data);\n      }\n      return;\n    }\n    if (alertMsg.length === 0) this.setState({ selectedTab: 0 });\n  };\n\n  handleInputChange = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value,\n    });\n  };\n  changeTab = (tabNo) => {\n    this.setState({\n      selectedTab: tabNo,\n    });\n    this.clearAllFields();\n  };\n\n  render() {\n    if (authService.getCurrentUser()) return <Redirect to=\"/customers\" />;\n    return (\n      <React.Fragment>\n        <ToastContainer />\n        <div className={\"crmHome-main\"}>\n          <div className=\"crmHome-title\">Best CRM App</div>\n          <Paper className={\"paperForm\"}>\n            <Tabs\n              value={this.state.selectedTab}\n              onChange={(ev, tabNo) => this.changeTab(tabNo)}\n              aria-label=\"simple tabs example\"\n            >\n              <Tab label=\"LOGIN\" />\n              <Tab label=\"SIGN UP\" />\n            </Tabs>\n\n            <div\n              className=\"loginView tabView\"\n              hidden={this.state.selectedTab !== 0}\n            >\n              <TextField\n                name=\"email\"\n                id=\"logIn-email\"\n                label=\"email\"\n                variant=\"outlined\"\n                onChange={this.handleInputChange}\n                value={this.state.email}\n              />\n\n              <TextField\n                name=\"password\"\n                id=\"logIn-password\"\n                label=\"password\"\n                variant=\"outlined\"\n                type={\"password\"}\n                onChange={this.handleInputChange}\n                value={this.state.password}\n              />\n\n              <Button\n                color=\"primary\"\n                variant=\"contained\"\n                onClick={(e) => this.logInUser(e)}\n              >\n                log in\n              </Button>\n            </div>\n            <div\n              className=\"signupView tabView\"\n              hidden={this.state.selectedTab !== 1}\n            >\n              <TextField\n                name=\"name\"\n                id=\"signup-name\"\n                label=\"name\"\n                variant=\"outlined\"\n                onChange={this.handleInputChange}\n                value={this.state.name}\n                // error={this.errorBoolsList[0]}\n              />\n              <TextField\n                name=\"email\"\n                id=\"signUp-email\"\n                label=\"email\"\n                variant=\"outlined\"\n                onChange={this.handleInputChange}\n                value={this.state.email}\n                // error={this.errorBoolsList[0]}\n              />\n\n              <TextField\n                name=\"password\"\n                id=\"signUp-password\"\n                label=\"password\"\n                variant=\"outlined\"\n                type={\"password\"}\n                onChange={this.handleInputChange}\n                value={this.state.password}\n              />\n\n              <TextField\n                name=\"rePassword\"\n                id=\"signUp-rePassword\"\n                label=\"password\"\n                variant=\"outlined\"\n                type={\"password\"}\n                onChange={this.handleInputChange}\n                value={this.state.rePassword}\n              />\n\n              <Button\n                color=\"primary\"\n                variant=\"contained\"\n                onClick={() => this.signUpUser()}\n              >\n                Sign Up\n              </Button>\n            </div>\n          </Paper>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n","import React from \"react\";\nimport authService from \"../../services/authService\";\nimport { Route, Redirect } from \"react-router-dom\";\n\nconst ProtectedRoute = ({ path, component: Component, render, ...rest }) => {\n  return (\n    <Route\n      exact\n      {...rest}\n      render={(props) => {\n        if (!authService.getCurrentUser())\n          return (\n            <Redirect\n              to={{\n                pathname: \"/\",\n                state: { from: props.location },\n              }}\n            />\n          );\n        return Component ? <Component {...props} /> : render(props);\n      }}\n    />\n  );\n};\nexport default ProtectedRoute;\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n\n\nconst useStyles = makeStyles({\n    table: {\n        minWidth: 650,\n    },\n});\n\n\nexport default function SimpleTable(props) {\n    const classes = useStyles();\n    // function deleteCustomerId(custId){\n    //     console.log(\"deleting stuff id:\"+custId);\n    //     let tableDataCopy = [].concat(props.tableData)\n    //     let indexOfCust=tableDataCopy.findIndex((cust)=>cust.custId===custId);\n    //     console.log(\"found index:\"+indexOfCust)\n    //     tableDataCopy.splice(indexOfCust,1);\n    //     localStorage.setItem('myData', JSON.stringify(tableDataCopy));\n    //\n    // }\n    return (\n        <TableContainer component={Paper}>\n            {/*{console.log(props)}*/}\n            <Table className={classes.table} aria-label=\"simple table\">\n                <TableHead>\n                    <TableRow>\n                        <TableCell>Customer ID</TableCell>\n                        <TableCell align=\"right\">Name</TableCell>\n                        <TableCell align=\"right\">Gender</TableCell>\n                        <TableCell align=\"right\">Contact No</TableCell>\n                        <TableCell align=\"right\">Remove?</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {props.tableData.map((row,idx) => (\n                        <TableRow key={row.name}>\n                            <TableCell component=\"th\" scope=\"row\">\n                                {row._id}\n                            </TableCell>\n                            <TableCell align=\"right\">{row.name}</TableCell>\n                            <TableCell align=\"right\">{row.gender}</TableCell>\n                            <TableCell align=\"right\">{row.contact}</TableCell>\n                            <TableCell align=\"right\">{props.deletingCustList.includes(row._id) ? <div>\n                                <CircularProgress color=\"secondary\"/></div> : <Button\n                                variant=\"contained\"\n                                color=\"secondary\"\n                                className={\"deleteBtn\"}\n                                startIcon={<DeleteIcon/>}\n                                onClick={() => {\n                                    props.deleteCustomerId(row._id,idx)\n                                }}\n                            />}</TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n}","import http from \"./httpService\";\nimport { apiUrl } from \"../config.json\";\n\nconst apiEndpoint = apiUrl + \"/customers\";\n\nfunction customerUrl(id) {\n  return `${apiEndpoint}/${id}`;\n}\n\nexport function getCustomers() {\n  return http.get(apiEndpoint);\n}\n\nexport function saveCustomer(customer) {\n  return http.post(apiEndpoint, customer);\n}\n\nexport function deleteCustomer(customerId) {\n  return http.delete(customerUrl(customerId));\n}\n","import React from \"react\";\nimport \"./styles.css\";\nimport { Button } from \"@material-ui/core\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport TextField from \"@material-ui/core/TextField\";\nimport SimpleTable from \"../Table\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport { Alert } from \"@material-ui/lab\";\nimport * as customerService from \"../../services/customerService\";\nconst _ = require(\"lodash\");\n\nclass EnquiryForm extends React.Component {\n  state = {\n    name: \"\",\n    gender: \"male\",\n    contact: \"\",\n    fetchedData: \"\",\n    tableData: [],\n    deletingCustList: [],\n    openSnackBar: false,\n    lastDeletedCustomer: {},\n    showUndoIndicator: false,\n  };\n\n  errorBoolsList = [false, false];\n\n  constructor(props) {\n    super(props);\n  }\n\n  setErrorsList = (errorsList) => {\n    console.log(\"errorList is:\" + errorsList);\n    this.errorBoolsList = [].concat(errorsList);\n  };\n  showSnackBar = () => {\n    this.setState({ openSnackBar: true });\n  };\n\n  closeSnackBar = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n\n    this.setState({ openSnackBar: false });\n  };\n  createData = (customerID, name, gender, contact) => {\n    return { _id: customerID, name, gender, contact };\n  };\n\n  deleteCustomerId = async (custId, idx) => {\n    let customerDataWithIndex = {};\n    customerDataWithIndex.data = this.state.tableData[idx];\n    customerDataWithIndex.index = idx;\n    //step 1 : add cust id to deleting list, so that indicator can be shown for deleting item\n    this.setState({\n      deletingCustList: this.state.deletingCustList.concat(custId),\n    });\n    console.log(\"deleting custID:\" + custId);\n\n    //step2: remove that customer from local table and also make network request to remove it from server.\n\n    const resp = await customerService.deleteCustomer(custId);\n    console.log(\"customer deleted, resp.data is \", resp.data);\n    this.setState({\n      tableData: this.state.tableData.filter((cust) => cust[\"_id\"] != custId),\n      deletingCustList: this.state.deletingCustList.filter(\n        (id) => id !== custId\n      ),\n    });\n    console.log(\n      \"main list, deleting id list and last cust deleting list updated using setState, showing snackbar now\" +\n        custId\n    );\n    this.showSnackBar();\n  };\n  validateData = () => {\n    let tempBoolsList = [false, false];\n    let alertWarning = [];\n    if (this.state.name.length === 0) {\n      alertWarning.push(\"Customer Name can't be empty\");\n      tempBoolsList[0] = true;\n    }\n    if (this.state.contact.length === 0) {\n      alertWarning.push(\"Contact number can't be empty\");\n      tempBoolsList[1] = true;\n    }\n    if (isNaN(this.state.contact)) {\n      alertWarning.push(\"Please enter valid mob number\");\n      tempBoolsList[1] = true;\n    }\n    if (`${parseInt(this.state.contact)}`.length !== 10) {\n      alertWarning.push(\"Contact Number needs to be of 10 digit\");\n      tempBoolsList[1] = true;\n    }\n\n    if (alertWarning.length > 0) alert(alertWarning.join(\"\\n\"));\n    this.setErrorsList(tempBoolsList);\n    this.setState();\n    return alertWarning.length === 0;\n  };\n  handleInputChange = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value,\n    });\n  };\n  genderList = [\"male\", \"female\", \"others\", \"prefer not to say\"];\n\n  updateTableData = async (tableArray, elementoBeAdded, position) => {\n    console.log(\n      \"position in new function is: and element to be added is \" + position,\n      elementoBeAdded\n    );\n    // elementoBeAdded._id=elementoBeAdded.customerID\n    if (position === undefined) tableArray.push(elementoBeAdded);\n    else tableArray.splice(position, 0, elementoBeAdded);\n    this.setState({ tableData: tableArray || [], lastDeletedCustomer: {} });\n  };\n  getCustomerIdAndSaveData = async () => {\n    //validate data and show alert window\n    if (!this.validateData()) {\n      this.setState({}, () => this.errorBoolsList);\n      return 0;\n    }\n    this.setState({ fetchedData: null });\n    let custDataMap = new Map();\n    const response = await customerService.saveCustomer(\n      _.pick(this.state, [\"name\", \"contact\", \"gender\"])\n    );\n    console.log(\n      \"response from server after adding another customer is ,\",\n      response\n    );\n    console.log(this.state);\n    // console.log(\"fetched CustomerID is: \" + jsonMap[\"_id\"]);\n\n    let tableDataCopy = [].concat(this.state.tableData);\n    await this.updateTableData(\n      tableDataCopy,\n      this.createData(\n        response.data[\"_id\"],\n        this.state.name,\n        this.state.gender,\n        this.state.contact\n      )\n    );\n    this.setState(\n      {\n        customerName: \"\",\n        gender: \"Male\",\n        mobNo: \"\",\n        fetchedData: \"\",\n      },\n      () => this.errorBoolsList\n    );\n  };\n\n  fetchFormData = async () => {\n    const response = await customerService.getCustomers();\n    let dataList = response.data;\n    this.setState({ tableData: dataList ?? [] });\n  };\n\n  componentDidMount() {\n    console.log(\"mounted\");\n    this.fetchFormData();\n    console.log(\"data from local storage\");\n  }\n\n  render() {\n    return (\n      <div>\n        <Paper className=\"paper\">\n          <form>\n            <div>\n              <TextField\n                name=\"name\"\n                id=\"customerName\"\n                label=\"Customer Name\"\n                variant=\"outlined\"\n                onChange={this.handleInputChange}\n                value={this.state.name}\n                error={this.errorBoolsList[0]}\n              />\n            </div>\n            <div>\n              <TextField\n                name=\"contact\"\n                id=\"mobNo\"\n                label=\"Contact No.\"\n                variant=\"outlined\"\n                onChange={this.handleInputChange}\n                value={this.state.contact}\n                error={this.errorBoolsList[1]}\n              />\n            </div>\n            <div>\n              <Select\n                labelId=\"demo-simple-select-outlined-label\"\n                id=\"demo-simple-select-outlined\"\n                name={\"gender\"}\n                value={this.state.gender}\n                onChange={this.handleInputChange}\n                color=\"secondary\"\n              >\n                {this.genderList.map((el) => (\n                  <MenuItem value={el}>{el}</MenuItem>\n                ))}\n              </Select>\n            </div>\n          </form>\n          {this.state.fetchedData === null ? (\n            <div>\n              <CircularProgress color=\"secondary\" />\n            </div>\n          ) : (\n            <div>\n              <Button\n                color=\"primary\"\n                variant=\"contained\"\n                onClick={() => this.getCustomerIdAndSaveData()}\n              >\n                Save info\n              </Button>\n              {this.state.showUndoIndicator ? (\n                <div>\n                  <CircularProgress color=\"secondary\" />\n                </div>\n              ) : (\n                \"\"\n              )}\n            </div>\n          )}\n        </Paper>\n        {this.state.tableData.length !== 0 ? (\n          <SimpleTable\n            className=\"simpleTable\"\n            tableData={this.state.tableData}\n            deletingCustList={this.state.deletingCustList}\n            deleteCustomerId={(custId, idx) =>\n              this.deleteCustomerId(custId, idx)\n            }\n          />\n        ) : (\n          \"\"\n        )}\n        <Snackbar\n          open={this.state.openSnackBar}\n          autoHideDuration={3000}\n          onClose={this.closeSnackBar}\n        >\n          <Alert onClose={this.closeSnackBar} severity=\"success\">\n            Customer Deleted!\n          </Alert>\n        </Snackbar>\n      </div>\n    );\n  }\n}\n\nexport default EnquiryForm;\n","import { Divider } from \"@material-ui/core\";\nimport React, { Component, useEffect } from \"react\";\n\nexport default function LogOut() {\n  useEffect(() => {\n    localStorage.removeItem(\"token\");\n    window.location = \"/\";\n  }, []);\n  return null;\n}\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport CrmHome from \"./components/CrmHome/index\";\nimport ProtectedRoute from \"./components/common/protectedRoute\";\nimport { Route, Switch, useHistory } from \"react-router-dom\";\nimport EnquiryForm from \"./components/EnquiryForm/index\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport { Button } from \"@material-ui/core\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport LogOut from \"./components/logout\";\nimport authService from \"./services/authService\";\n\nfunction App(props) {\n  const history = useHistory();\n  const [user, setUser] = useState({});\n  async function logOutUser() {\n    authService.logout();\n    window.location = \"/\";\n    // history.push(\"/\");\n  }\n\n  useEffect(() => {\n    const user = authService.getCurrentUser();\n    setUser(user);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <AppBar position=\"static\" className={\"topAppBar\"}>\n        <Toolbar className={\"appBar-toolBar\"}>\n          {user ? (\n            <Button color=\"inherit\" onClick={logOutUser}>\n              Logout\n            </Button>\n          ) : (\n            \"\"\n          )}\n        </Toolbar>\n      </AppBar>\n      <header className=\"App-header\">\n        <Switch>\n          <ProtectedRoute exact path={\"/customers\"} component={EnquiryForm} />\n\n          <Route path={\"/\"} component={CrmHome} />\n          <Route path={\"/logout\"} component={LogOut} />\n          {/*<Route path={\"/reactForms\"} component={CrmHome}/>*/}\n        </Switch>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { HashRouter as Router } from \"react-router-dom\";\nimport logger from \"./services/logService\";\n\nlogger.init();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}