{"version":3,"sources":["Table/index.js","EnquiryForm/index.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","table","minWidth","SimpleTable","props","classes","TableContainer","component","Paper","Table","className","aria-label","TableHead","TableRow","TableCell","align","TableBody","tableData","map","row","key","name","scope","customerID","gender","contact","deletingCustList","includes","CircularProgress","color","Button","variant","startIcon","onClick","deleteCustomerId","EnquiryForm","state","customerName","mobNo","fetchedData","openSnackBar","lastDeletedCustomer","showUndoIndicator","errorBoolsList","setErrorsList","errorsList","console","log","concat","showSnackBar","setState","closeSnackBar","event","reason","createData","custId","a","indexOfCust","findIndex","cust","makePostRequest","index","deletedCustomerID","filter","id","validateData","tempBoolsList","alertWarning","length","push","isNaN","parseInt","alert","join","handleInputChange","target","value","genderList","undoDelete","deleteMap","Map","res","JSON","stringify","tableDataCopy","deletingCustListCopy","custIdBeingDeleted","updateTableData","tableArray","elementoBeAdded","position","undefined","splice","getCustomerId","custDataMap","jsonMap","url","dataAsMap","fetch","method","headers","body","response","json","fetchFormData","resp","dataList","this","TextField","label","onChange","error","Select","labelId","el","MenuItem","Snackbar","open","autoHideDuration","onClose","Alert","severity","action","size","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.9506d690.chunk.js","sourcesContent":["import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n\n\nconst useStyles = makeStyles({\n    table: {\n        minWidth: 650,\n    },\n});\n\n\nexport default function SimpleTable(props) {\n    const classes = useStyles();\n    // function deleteCustomerId(custId){\n    //     console.log(\"deleting stuff id:\"+custId);\n    //     let tableDataCopy = [].concat(props.tableData)\n    //     let indexOfCust=tableDataCopy.findIndex((cust)=>cust.custId===custId);\n    //     console.log(\"found index:\"+indexOfCust)\n    //     tableDataCopy.splice(indexOfCust,1);\n    //     localStorage.setItem('myData', JSON.stringify(tableDataCopy));\n    //\n    // }\n    return (\n        <TableContainer component={Paper}>\n            {/*{console.log(props)}*/}\n            <Table className={classes.table} aria-label=\"simple table\">\n                <TableHead>\n                    <TableRow>\n                        <TableCell>Customer ID</TableCell>\n                        <TableCell align=\"right\">Name</TableCell>\n                        <TableCell align=\"right\">Gender</TableCell>\n                        <TableCell align=\"right\">Contact No</TableCell>\n                        <TableCell align=\"right\">Remove?</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {props.tableData.map((row) => (\n                        <TableRow key={row.name}>\n                            <TableCell component=\"th\" scope=\"row\">\n                                {row.customerID}\n                            </TableCell>\n                            <TableCell align=\"right\">{row.name}</TableCell>\n                            <TableCell align=\"right\">{row.gender}</TableCell>\n                            <TableCell align=\"right\">{row.contact}</TableCell>\n                            <TableCell align=\"right\">{props.deletingCustList.includes(row.customerID) ? <div>\n                                <CircularProgress color=\"secondary\"/></div> : <Button\n                                variant=\"contained\"\n                                color=\"secondary\"\n                                className={\"deleteBtn\"}\n                                startIcon={<DeleteIcon/>}\n                                onClick={() => {\n                                    props.deleteCustomerId(row.customerID)\n                                }}\n                            />}</TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n}","import React from \"react\";\nimport './styles.css'\nimport {Button} from '@material-ui/core';\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport TextField from \"@material-ui/core/TextField\";\nimport SimpleTable from \"../Table\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport {Alert} from '@material-ui/lab';\n\nclass EnquiryForm extends React.Component {\n    state = {\n        customerName: '',\n        gender: \"Male\",\n        mobNo: \"\",\n        fetchedData: \"\",\n        tableData: [],\n        deletingCustList: [],\n        openSnackBar: false,\n        lastDeletedCustomer: [],\n        showUndoIndicator: false\n    };\n\n    errorBoolsList = [false, false];\n\n    constructor(props) {\n        super(props);\n\n    }\n\n    setErrorsList = (errorsList) => {\n        console.log(\"errorList is:\" + errorsList)\n        this.errorBoolsList = [].concat(errorsList);\n    }\n    showSnackBar = () => {\n        this.setState({openSnackBar: true});\n    };\n\n    closeSnackBar = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n\n        this.setState({openSnackBar: false});\n    };\n    createData = (customerID, name, gender, contact,) => {\n        return {customerID, name, gender, contact,}\n    }\n\n    deleteCustomerId = async (custId) => {\n        //step 1 : add cust id to deleting list, so that indicator can be shown for deleting item\n        this.setState({deletingCustList: this.state.deletingCustList.concat(custId)})\n        console.log(\"deleting custID:\" + custId);\n\n        //step2: remove that customer from local table and also make network request to remove it from server.\n        let indexOfCust = this.state.tableData.findIndex((cust) => cust.customerID === custId);\n        let res = await this.makePostRequest(\"http://localhost:5000/deleteCustomer\", {\n            customerID: custId,\n            index: indexOfCust\n        })\n        let deletedCustomerID = custId;\n        console.log(\"deleting custID from network, now updating local variables:\" + custId);\n        this.setState({\n            lastDeletedCustomer: deletedCustomerID,\n            tableData: this.state.tableData.filter((cust) => cust[\"customerID\"] != custId),\n            deletingCustList: this.state.deletingCustList.filter((id) => id !== custId)\n        });\n        console.log(\"main list, deleting id list and last cust deleting list updated using setState, showing snackbar now\" + custId);\n        this.showSnackBar();\n    }\n    validateData = () => {\n        let tempBoolsList = [false, false];\n        let alertWarning = [];\n        if (this.state.customerName.length === 0) {\n            alertWarning.push(\"Customer Name can't be empty\");\n            tempBoolsList[0] = true;\n        }\n        if (this.state.mobNo.length === 0) {\n            alertWarning.push(\"Contact number can't be empty\");\n            tempBoolsList[1] = true;\n        }\n        if (isNaN(this.state.mobNo)) {\n            alertWarning.push(\"Please enter valid mob number\");\n            tempBoolsList[1] = true;\n        }\n        if (`${parseInt(this.state.mobNo)}`.length !== 10) {\n            alertWarning.push(\"Contact Number needs to be of 10 digit\");\n            tempBoolsList[1] = true;\n        }\n\n        if (alertWarning.length > 0)\n            alert(alertWarning.join(\"\\n\"));\n        this.setErrorsList(tempBoolsList);\n        this.setState();\n        return alertWarning.length === 0\n    }\n    handleInputChange = (event) => {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n    genderList = [\"Male\", \"Female\", \"Rather Not Say\", \"Others\"];\n    undoDelete = async () => {\n        this.closeSnackBar();\n        this.setState({showUndoIndicator: true})\n        let deleteMap = new Map();\n        deleteMap[\"customerID\"] = this.state.lastDeletedCustomer;\n        let res = await this.makePostRequest(\"http://localhost:5000/undoDelete\", deleteMap)\n        console.log(\"res from undo\" + JSON.stringify(res))\n        let tableDataCopy = [].concat(this.state.tableData);\n        let deletingCustListCopy = [].concat(this.state.deletingCustList);\n        deletingCustListCopy = deletingCustListCopy.filter((custId) => res[\"deletedCustomer\"][\"customerID\"] !== custId)\n        this.setState({custIdBeingDeleted: deletingCustListCopy});\n        await this.updateTableData(tableDataCopy, res[\"deletedCustomer\"], res[\"deletedCustomerIndex\"])\n        this.setState({showUndoIndicator: false})\n    }\n\n    updateTableData = async (tableArray, elementoBeAdded, position) => {\n        console.log(\"position in new function is:\" + position)\n        if (position === undefined)\n            tableArray.push(elementoBeAdded)\n        else\n            tableArray.splice(position, 0, elementoBeAdded);\n        this.setState({tableData: tableArray, lastDeletedCustomer: []});\n    }\n    getCustomerId = async () => {\n        if (!this.validateData()) {\n            this.setState({}, () => this.errorBoolsList);\n            return 0;\n        }\n        this.setState({fetchedData: null});\n        let custDataMap = new Map();\n        custDataMap[\"name\"] = this.state.customerName;\n        custDataMap[\"gender\"] = this.state.gender;\n        custDataMap[\"contact\"] = this.state.mobNo;\n        let jsonMap = await this.makePostRequest('http://localhost:5000/', custDataMap);\n        this.setState({fetchedData: jsonMap['customerID']});\n        console.log(this.state);\n        console.log(\"fetched CustomerID is: \" + jsonMap['customerID']);\n\n        let tableDataCopy = [].concat(this.state.tableData);\n        await this.updateTableData(tableDataCopy, this.createData(jsonMap['customerID'], this.state.customerName, this.state.gender, this.state.mobNo))\n        this.setState({\n            customerName: '',\n            gender: \"Male\",\n            mobNo: \"\",\n            fetchedData: \"\",\n        }, () => this.errorBoolsList)\n    }\n\n    makePostRequest = async (url, dataAsMap) => {\n        let response = await fetch(url, {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify(dataAsMap)\n        })\n        let jsonMap = await response.json();\n        return jsonMap;\n    }\n    fetchFormData = async () => {\n        let resp = await fetch(\"http://localhost:5000/customers\");\n        let dataList = await resp.json();\n        this.setState({tableData: dataList ?? []})\n        // return JSON.parse(resp.body);\n    }\n\n    componentDidMount() {\n        console.log(\"mounted\")\n        this.fetchFormData();\n        console.log(\"data from local storage\");\n    }\n\n    render() {\n\n        return (\n            <div>\n                <Paper className=\"paper\">\n                    <form>\n                        <div>\n                            <TextField name=\"customerName\" id=\"customerName\" label=\"Customer Name\" variant=\"outlined\"\n                                       onChange={this.handleInputChange} value={this.state.customerName}\n                                       error={this.errorBoolsList[0]}\n                            />\n                        </div>\n                        <div>\n                            <TextField name=\"mobNo\" id=\"mobNo\" label=\"Contact No.\" variant=\"outlined\"\n                                       onChange={this.handleInputChange} value={this.state.mobNo}\n                                       error={this.errorBoolsList[1]}/>\n\n                        </div>\n                        <div>\n\n\n                            <Select\n                                labelId=\"demo-simple-select-outlined-label\"\n                                id=\"demo-simple-select-outlined\"\n                                name={\"gender\"}\n                                value={this.state.gender}\n                                onChange={this.handleInputChange}\n                                color=\"secondary\"\n                            >\n                                {this.genderList.map((el) =>\n                                    (<MenuItem value={el}>{el}</MenuItem>)\n                                )}\n                            </Select>\n\n                        </div>\n\n                    </form>\n                    {this.state.fetchedData === null ? <div>\n                            <CircularProgress color=\"secondary\"/></div> :\n                        <div>\n                            <Button color=\"primary\" variant=\"contained\" onClick={() => this.getCustomerId()}>Save info\n                            </Button>\n                            {this.state.showUndoIndicator ? <div>\n                                <CircularProgress color=\"secondary\"/></div> : \"\"}\n                        </div>}\n                </Paper>\n                {this.state.tableData.length !== 0 ?\n                    <SimpleTable className=\"simpleTable\" tableData={this.state.tableData}\n                                 deletingCustList={this.state.deletingCustList}\n                                 deleteCustomerId={(custId) => this.deleteCustomerId(custId)}/> : \"\"}\n                <Snackbar open={this.state.openSnackBar} autoHideDuration={3000} onClose={this.closeSnackBar}>\n                    <Alert onClose={this.closeSnackBar} severity=\"success\" action={\n                        <Button color=\"inherit\" size=\"small\" onClick={this.undoDelete}>\n                            Undo\n                        </Button>\n                    }>\n                        Customer Deleted!\n                    </Alert>\n                </Snackbar>\n            </div>\n        );\n    }\n}\n\n\nexport default EnquiryForm;","import React from 'react';\nimport './App.css';\nimport EnquiryForm from \"./EnquiryForm\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <EnquiryForm/>\n\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}