{"version":3,"sources":["CrmHome/index.js","Table/index.js","EnquiryForm/index.js","App.js","serviceWorker.js","index.js"],"names":["CrmHome","state","email","pswd","rePswd","selectedTab","warning","clearAllFields","setState","validateEmail","test","logInUser","e","a","preventDefault","alertMsg","length","alert","makePostRequest","jsonMap","result","props","history","push","signUpUser","trim","userSignUpDetails","Map","console","log","handleInputChange","event","target","name","value","changeTab","tabNo","this","className","Paper","Tabs","onChange","ev","aria-label","Tab","label","hidden","TextField","id","variant","type","Button","color","onClick","React","Component","url","dataAsMap","fetch","method","headers","credentials","body","JSON","stringify","response","json","useStyles","makeStyles","table","minWidth","SimpleTable","classes","TableContainer","component","Table","TableHead","TableRow","TableCell","align","TableBody","tableData","map","row","idx","key","scope","_id","gender","contact","deletingCustList","includes","CircularProgress","startIcon","deleteCustomerId","EnquiryForm","customerName","mobNo","fetchedData","openSnackBar","lastDeletedCustomer","showUndoIndicator","errorBoolsList","setErrorsList","errorsList","concat","showSnackBar","closeSnackBar","reason","createData","customerID","custId","customerDataWithIndex","data","index","filter","cust","validateData","tempBoolsList","alertWarning","isNaN","parseInt","join","genderList","undoDelete","deleteMap","res","tableDataCopy","deletingCustListCopy","custIdBeingDeleted","updateTableData","tableArray","elementoBeAdded","position","undefined","splice","getCustomerIdAndSaveData","custDataMap","fetchFormData","resp","status","dataList","error","Select","labelId","el","MenuItem","Snackbar","open","autoHideDuration","onClose","Alert","severity","action","size","App","useHistory","useEffect","AppBar","Toolbar","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"iRASqBA,E,4MACjBC,MAAQ,CACJC,MAAO,GACPC,KAAM,GACNC,OAAQ,GACRC,YAAa,EACbC,QAAS,I,EAGbC,eAAiB,WACb,EAAKC,SAAS,CACVN,MAAO,GACPC,KAAM,GACNC,OAAQ,GACRE,QAAS,M,EAIjBG,cAAgB,WACZ,MAAI,gDAAgDC,KAAK,EAAKT,MAAMC,OACzD,GACG,iB,EASlBS,U,uCAAY,WAAOC,GAAP,iBAAAC,EAAA,yDACRD,EAAEE,iBACEC,EAAW,GAEXA,EAD4B,IAA5B,EAAKd,MAAMC,MAAMc,OACN,2BAEA,EAAKP,gBAEW,IAA3B,EAAKR,MAAME,KAAKa,SAChBD,GAAsB,iCACF,IAApBA,EAASC,OAVL,uBAWJC,MAAMF,GAXF,0CAeYG,EAAgB,8BAA+B,CAC/D,MAAS,EAAKjB,MAAMC,MACpB,KAAQ,EAAKD,MAAME,OAjBf,UAmBe,aAJnBgB,EAfI,QAmBIC,OACRL,EAAW,+CACe,kBAAnBI,EAAQC,OACfL,EAAW,6CACe,aAAnBI,EAAQC,QAEf,EAAKC,MAAMC,QAAQC,KAAK,cAGJ,IAApBR,EAASC,OA5BL,wBA6BJC,MAAMF,GA7BF,+D,wDAkCZS,W,sBAAa,gCAAAX,EAAA,yDAELE,EAAW,GAEXA,EAD4B,IAA5B,EAAKd,MAAMC,MAAMc,OACN,2BAEA,EAAKP,gBAEW,IAA3B,EAAKR,MAAME,KAAKa,OAChBD,GAAsB,4BACf,EAAKd,MAAME,OAAS,EAAKF,MAAMG,SACtCW,GAAsB,2BAIK,IAA3BA,EAASU,OAAOT,OAfX,uBAgBLC,MAAMF,GAhBD,iCAqBLW,EAAoB,IAAIC,KACX,MAAY,EAAK1B,MAAMC,MACxCwB,EAAiB,KAAW,EAAKzB,MAAME,KAvB9B,UAwBWe,EAAgB,+BAAgCQ,GAxB3D,WAwBLP,EAxBK,OA0BTS,QAAQC,IAAI,oCACZD,QAAQC,IAAIV,GACW,WAAnBA,EAAQC,SACRL,EAAW,uCACQ,mBAAnBI,EAAQC,SACRL,EAAW,2EACgB,IAA3BA,EAASU,OAAOT,OAhCX,wBAiCLC,MAAMF,GAjCD,2BAoCe,IAApBA,EAASC,QACT,EAAKR,SAAS,CAACH,YAAa,IArCvB,4C,EAyCbyB,kBAAoB,SAACC,GACjB,EAAKvB,SAAL,eACKuB,EAAMC,OAAOC,KAAOF,EAAMC,OAAOE,S,EAG1CC,UAAY,SAACC,GACT,EAAK5B,SAAS,CACVH,YAAa+B,IAEjB,EAAK7B,kB,+DAxFL,GAAI8B,KAAKpC,MAAME,OAASkC,KAAKpC,MAAMG,OAC/B,MAAO,0B,+BA0FL,IAAD,OAEL,OACI,yBAAKkC,UAAW,gBACZ,yBAAKA,UAAU,iBAAf,gBAGA,kBAACC,EAAA,EAAD,CAAOD,UAAW,aACd,kBAACE,EAAA,EAAD,CAAMN,MAAOG,KAAKpC,MAAMI,YAAaoC,SAAU,SAACC,EAAIN,GAAL,OAAe,EAAKD,UAAUC,IACvEO,aAAW,uBACb,kBAACC,EAAA,EAAD,CAAKC,MAAM,UACX,kBAACD,EAAA,EAAD,CAAKC,MAAM,aAGf,yBAAKP,UAAU,oBAAoBQ,OAAmC,IAA3BT,KAAKpC,MAAMI,aAClD,kBAAC0C,EAAA,EAAD,CAAWd,KAAK,QAAQe,GAAG,cAAcH,MAAM,QAAQI,QAAQ,WACpDR,SAAUJ,KAAKP,kBAAmBI,MAAOG,KAAKpC,MAAMC,QAE/D,kBAAC6C,EAAA,EAAD,CAAWd,KAAK,OAAOe,GAAG,aAAaH,MAAM,WAAWI,QAAQ,WAAWC,KAAM,WACtET,SAAUJ,KAAKP,kBAAmBI,MAAOG,KAAKpC,MAAME,OAE/D,kBAACgD,EAAA,EAAD,CAAQC,MAAM,UAAUH,QAAQ,YACxBI,QAAS,SAACzC,GAAD,OAAO,EAAKD,UAAUC,KADvC,WAIJ,yBAAK0B,UAAU,qBAAqBQ,OAAmC,IAA3BT,KAAKpC,MAAMI,aACnD,kBAAC0C,EAAA,EAAD,CAAWd,KAAK,QAAQe,GAAG,eAAeH,MAAM,QAAQI,QAAQ,WACrDR,SAAUJ,KAAKP,kBAAmBI,MAAOG,KAAKpC,MAAMC,QAI/D,kBAAC6C,EAAA,EAAD,CAAWd,KAAK,OAAOe,GAAG,cAAcH,MAAM,WAAWI,QAAQ,WAAWC,KAAM,WACvET,SAAUJ,KAAKP,kBAAmBI,MAAOG,KAAKpC,MAAME,OAE/D,kBAAC4C,EAAA,EAAD,CAAWd,KAAK,SAASe,GAAG,gBAAgBH,MAAM,WAAWI,QAAQ,WAC1DC,KAAM,WACNT,SAAUJ,KAAKP,kBAAmBI,MAAOG,KAAKpC,MAAMG,SAE/D,kBAAC+C,EAAA,EAAD,CAAQC,MAAM,UAAUH,QAAQ,YACxBI,QAAS,kBAAM,EAAK7B,eAD5B,kB,GA3Ja8B,IAAMC,WAqKpC,SAAerC,EAAtB,oC,4CAAO,WAA+BsC,EAAKC,GAApC,iBAAA5C,EAAA,sEACkB6C,MAAMF,EAAK,CAC5BG,OAAQ,OACRC,QAAS,CAAC,eAAgB,oBAC1BC,YAAa,UACbC,KAAMC,KAAKC,UAAUP,KALtB,cACCQ,EADD,gBAOiBA,EAASC,OAP1B,cAOC/C,EAPD,yBAQIA,GARJ,4C,qJChKDgD,EAAYC,YAAW,CACzBC,MAAO,CACHC,SAAU,OAKH,SAASC,EAAYlD,GAChC,IAAMmD,EAAUL,IAUhB,OACI,kBAACM,EAAA,EAAD,CAAgBC,UAAWnC,KAEvB,kBAACoC,EAAA,EAAD,CAAOrC,UAAWkC,EAAQH,MAAO1B,aAAW,gBACxC,kBAACiC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,oBACA,kBAACA,EAAA,EAAD,CAAWC,MAAM,SAAjB,QACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,SAAjB,UACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,SAAjB,cACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,SAAjB,aAGR,kBAACC,EAAA,EAAD,KACK3D,EAAM4D,UAAUC,KAAI,SAACC,EAAIC,GAAL,OACjB,kBAACP,EAAA,EAAD,CAAUQ,IAAKF,EAAIlD,MACf,kBAAC6C,EAAA,EAAD,CAAWJ,UAAU,KAAKY,MAAM,OAC3BH,EAAII,KAET,kBAACT,EAAA,EAAD,CAAWC,MAAM,SAASI,EAAIlD,MAC9B,kBAAC6C,EAAA,EAAD,CAAWC,MAAM,SAASI,EAAIK,QAC9B,kBAACV,EAAA,EAAD,CAAWC,MAAM,SAASI,EAAIM,SAC9B,kBAACX,EAAA,EAAD,CAAWC,MAAM,SAAS1D,EAAMqE,iBAAiBC,SAASR,EAAII,KAAO,6BACjE,kBAACK,EAAA,EAAD,CAAkBxC,MAAM,eAAsB,kBAACD,EAAA,EAAD,CAC9CF,QAAQ,YACRG,MAAM,YACNd,UAAW,YACXuD,UAAW,kBAAC,IAAD,MACXxC,QAAS,WACLhC,EAAMyE,iBAAiBX,EAAII,IAAIH,c,sBCsLpDW,E,kDAvNX,WAAY1E,GAAQ,IAAD,8BACf,cAAMA,IAfVpB,MAAQ,CACJ+F,aAAc,GACdR,OAAQ,OACRS,MAAO,GACPC,YAAa,GACbjB,UAAW,GACXS,iBAAkB,GAClBS,cAAc,EACdC,oBAAqB,GACrBC,mBAAmB,GAKJ,EAFnBC,eAAiB,EAAC,GAAO,GAEN,EAKnBC,cAAgB,SAACC,GACb5E,QAAQC,IAAI,gBAAkB2E,GAC9B,EAAKF,eAAiB,GAAGG,OAAOD,IAPjB,EASnBE,aAAe,WACX,EAAKlG,SAAS,CAAC2F,cAAc,KAVd,EAanBQ,cAAgB,SAAC5E,EAAO6E,GACL,cAAXA,GAIJ,EAAKpG,SAAS,CAAC2F,cAAc,KAlBd,EAoBnBU,WAAa,SAACC,EAAY7E,EAAMuD,EAAQC,GACpC,MAAO,CAACF,IAAIuB,EAAY7E,OAAMuD,SAAQC,YArBvB,EAwBnBK,iBAxBmB,uCAwBA,WAAOiB,EAAQ3B,GAAf,eAAAvE,EAAA,6DACXmG,EAAsB,IACJC,KAAK,EAAKhH,MAAMgF,UAAUG,GAChD4B,EAAsBE,MAAM9B,EAE5B,EAAK5E,SAAS,CAACkF,iBAAkB,EAAKzF,MAAMyF,iBAAiBe,OAAOM,KACpEnF,QAAQC,IAAI,mBAAqBkF,GANlB,SAUC7F,EAAgB,uCAAwC,CACpE4F,WAAYC,IAXD,cAaSA,EACxBnF,QAAQC,IAAI,8DAAgEkF,GAC5E,EAAKvG,SAAS,CACV4F,oBAAqBY,EACrB/B,UAAW,EAAKhF,MAAMgF,UAAUkC,QAAO,SAACC,GAAD,OAAUA,EAAI,KAAWL,KAChErB,iBAAkB,EAAKzF,MAAMyF,iBAAiByB,QAAO,SAACnE,GAAD,OAAQA,IAAO+D,OAExEnF,QAAQC,IAAI,uGAAyGkF,GACrH,EAAKL,eArBU,4CAxBA,0DA+CnBW,aAAe,WACX,IAAIC,EAAgB,EAAC,GAAO,GACxBC,EAAe,GAsBnB,OArBuC,IAAnC,EAAKtH,MAAM+F,aAAahF,SACxBuG,EAAahG,KAAK,gCAClB+F,EAAc,IAAK,GAES,IAA5B,EAAKrH,MAAMgG,MAAMjF,SACjBuG,EAAahG,KAAK,iCAClB+F,EAAc,IAAK,GAEnBE,MAAM,EAAKvH,MAAMgG,SACjBsB,EAAahG,KAAK,iCAClB+F,EAAc,IAAK,GAEwB,KAA3C,UAAGG,SAAS,EAAKxH,MAAMgG,QAASjF,SAChCuG,EAAahG,KAAK,0CAClB+F,EAAc,IAAK,GAGnBC,EAAavG,OAAS,GACtBC,MAAMsG,EAAaG,KAAK,OAC5B,EAAKnB,cAAce,GACnB,EAAK9G,WAC0B,IAAxB+G,EAAavG,QAvEL,EAyEnBc,kBAAoB,SAACC,GACjB,EAAKvB,SAAL,eACKuB,EAAMC,OAAOC,KAAOF,EAAMC,OAAOE,SA3EvB,EA8EnByF,WAAa,CAAC,OAAQ,SAAU,iBAAkB,UA9E/B,EA+EnBC,WA/EmB,sBA+EN,kCAAA/G,EAAA,6DACT,EAAK8F,gBACL,EAAKnG,SAAS,CAAC6F,mBAAmB,KAC9BwB,EAAY,IAAIlG,KACX,WAAiB,EAAK1B,MAAMmG,oBAAoBa,KAAK1B,IAJrD,SAKOrE,EAAgB,mCAAoC2G,GAL3D,cAKLC,EALK,OAMTlG,QAAQC,IAAI,gBAAkBkC,KAAKC,UAAU8D,IACzCC,EAAgB,GAAGtB,OAAO,EAAKxG,MAAMgF,WAEzC+C,GADIA,EAAuB,GAAGvB,OAAO,EAAKxG,MAAMyF,mBACJyB,QAAO,SAACJ,GAAD,OAAYe,EAAG,gBAAH,aAAyCf,KACxG,EAAKvG,SAAS,CAACyH,mBAAoBD,IACnCpG,QAAQC,IAAI,8DAA+DiG,EAAG,kBAAuB,EAAK7H,MAAMmG,oBAAoBc,OACpItF,QAAQC,IAAI,uDAAuD,EAAK5B,MAAMmG,oBAAoBa,KAAK,EAAKhH,MAAMmG,oBAAoBc,OAZ7H,UAaH,EAAKgB,gBAAgBH,EAAe,EAAK9H,MAAMmG,oBAAoBa,KAAM,EAAKhH,MAAMmG,oBAAoBc,OAbrG,QAcT,EAAK1G,SAAS,CAAC6F,mBAAmB,IAdzB,4CA/EM,EAgGnB6B,gBAhGmB,uCAgGD,WAAOC,EAAYC,EAAiBC,GAApC,SAAAxH,EAAA,sDACde,QAAQC,IAAI,2DAA6DwG,EAASD,QAEjEE,IAAbD,EACAF,EAAW5G,KAAK6G,GAEhBD,EAAWI,OAAOF,EAAU,EAAGD,GACnC,EAAK5H,SAAS,CAACyE,UAAWkD,GAAc,GAAI/B,oBAAqB,KAPnD,2CAhGC,4DAyGnBoC,yBAzGmB,sBAyGQ,gCAAA3H,EAAA,yDAClB,EAAKwG,eADa,uBAEnB,EAAK7G,SAAS,IAAI,kBAAM,EAAK8F,kBAFV,kBAGZ,GAHY,cAKvB,EAAK9F,SAAS,CAAC0F,YAAa,QACxBuC,EAAc,IAAI9G,KACX,KAAW,EAAK1B,MAAM+F,aACjCyC,EAAW,OAAa,EAAKxI,MAAMuF,OACnCiD,EAAW,QAAc,EAAKxI,MAAMgG,MATb,UAUH/E,EAAgB,yBAA0BuH,GAVvC,eAUnBtH,EAVmB,OAWvB,EAAKX,SAAS,CAAC0F,YAAa/E,EAAO,MACnCS,QAAQC,IAAI,0DAA0DV,GACtES,QAAQC,IAAI,EAAK5B,OACjB2B,QAAQC,IAAI,0BAA4BV,EAAO,KAE3C4G,EAAgB,GAAGtB,OAAO,EAAKxG,MAAMgF,WAhBlB,UAiBjB,EAAKiD,gBAAgBH,EAAe,EAAKlB,WAAW1F,EAAO,IAAS,EAAKlB,MAAM+F,aAAc,EAAK/F,MAAMuF,OAAQ,EAAKvF,MAAMgG,QAjB1G,QAkBvB,EAAKzF,SAAS,CACVwF,aAAc,GACdR,OAAQ,OACRS,MAAO,GACPC,YAAa,KACd,kBAAM,EAAKI,kBAvBS,4CAzGR,EAmInBoC,cAnImB,sBAmIH,8BAAA7H,EAAA,sEACK6C,MAAM,kCAAmC,CAACG,YAAa,YAD5D,cAEQ,OADhB8E,EADQ,QAEHC,SACL3H,MAAM,uCACN,EAAKI,MAAMC,QAAQC,KAAK,KACxBK,QAAQC,IAAI,sBALJ,SAOS8G,EAAKzE,OAPd,OAOR2E,EAPQ,OAQZ,EAAKrI,SAAS,CAACyE,UAAS,OAAE4D,QAAF,IAAEA,IAAY,KAR1B,2CAnIG,E,gEAgJfjH,QAAQC,IAAI,WACZQ,KAAKqG,gBACL9G,QAAQC,IAAI,6B,+BAGN,IAAD,OAEL,OACI,6BACI,kBAACU,EAAA,EAAD,CAAOD,UAAU,SACb,8BACI,6BACI,kBAACS,EAAA,EAAD,CAAWd,KAAK,eAAee,GAAG,eAAeH,MAAM,gBAAgBI,QAAQ,WACpER,SAAUJ,KAAKP,kBAAmBI,MAAOG,KAAKpC,MAAM+F,aACpD8C,MAAOzG,KAAKiE,eAAe,MAG1C,6BACI,kBAACvD,EAAA,EAAD,CAAWd,KAAK,QAAQe,GAAG,QAAQH,MAAM,cAAcI,QAAQ,WACpDR,SAAUJ,KAAKP,kBAAmBI,MAAOG,KAAKpC,MAAMgG,MACpD6C,MAAOzG,KAAKiE,eAAe,MAG1C,6BAGI,kBAACyC,EAAA,EAAD,CACIC,QAAQ,oCACRhG,GAAG,8BACHf,KAAM,SACNC,MAAOG,KAAKpC,MAAMuF,OAClB/C,SAAUJ,KAAKP,kBACfsB,MAAM,aAELf,KAAKsF,WAAWzC,KAAI,SAAC+D,GAAD,OAChB,kBAACC,EAAA,EAAD,CAAUhH,MAAO+G,GAAKA,SAOX,OAA3B5G,KAAKpC,MAAMiG,YAAuB,6BAC3B,kBAACN,EAAA,EAAD,CAAkBxC,MAAM,eAC5B,6BACI,kBAACD,EAAA,EAAD,CAAQC,MAAM,UAAUH,QAAQ,YAAYI,QAAS,kBAAM,EAAKmF,6BAAhE,aAGCnG,KAAKpC,MAAMoG,kBAAoB,6BAC5B,kBAACT,EAAA,EAAD,CAAkBxC,MAAM,eAAsB,KAG7B,IAAhCf,KAAKpC,MAAMgF,UAAUjE,OAClB,kBAACuD,EAAD,CAAajC,UAAU,cAAc2C,UAAW5C,KAAKpC,MAAMgF,UAC9CS,iBAAkBrD,KAAKpC,MAAMyF,iBAC7BI,iBAAkB,SAACiB,EAAQ3B,GAAT,OAAiB,EAAKU,iBAAiBiB,EAAQ3B,MAAU,GAC5F,kBAAC+D,EAAA,EAAD,CAAUC,KAAM/G,KAAKpC,MAAMkG,aAAckD,iBAAkB,IAAMC,QAASjH,KAAKsE,eAC3E,kBAAC4C,EAAA,EAAD,CAAOD,QAASjH,KAAKsE,cAAe6C,SAAS,UAAUC,OACnD,kBAACtG,EAAA,EAAD,CAAQC,MAAM,UAAUsG,KAAK,QAAQrG,QAAShB,KAAKuF,YAAnD,SADJ,2B,GAxNMtE,IAAMC,W,kBCyCjBoG,MA7Cf,SAAatI,GACT,IAAMC,EAAUsI,cADA,4CAGhB,sBAAA/I,EAAA,6DACIe,QAAQC,IAAI,oBADhB,SAEuBX,EAAgB,+BAAgC,CAC/D,QAAW,eAHnB,OAM0B,cAN1B,OAMe0H,OACPtH,EAAQC,KAAK,KAEbN,MAAM,gCATd,4CAHgB,sBAsBhB,OANA4I,qBAAU,WACN,IAAMnJ,EAAOW,EACbO,QAAQC,IAAI,SACZD,QAAQC,IAAInB,KACb,IAGC,yBAAK4B,UAAU,OACX,kBAACwH,EAAA,EAAD,CAAQzB,SAAS,SAAS/F,UAAW,aACjC,kBAACyH,EAAA,EAAD,CAASzH,UAAW,kBAEhB,kBAACa,EAAA,EAAD,CAAQC,MAAM,UAAUC,QA3BxB,4CA2BA,WAGR,4BAAQf,UAAU,cACd,kBAAC,IAAD,KAEI,kBAAC,IAAD,CAAO0H,OAAK,EAACC,KAAM,aAAcvF,UAAWqB,IAE5C,kBAAC,IAAD,CAAOkE,KAAM,IAAKvF,UAAW1E,QChC7BkK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCXNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,IAAD,KACI,kBAAC,EAAD,QAGVC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLlH,QAAQkH,MAAMA,EAAMqC,a","file":"static/js/main.8a278b8e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './styles.css'\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\n\r\n\r\nexport default class CrmHome extends React.Component {\r\n    state = {\r\n        email: \"\",\r\n        pswd: \"\",\r\n        rePswd: \"\",\r\n        selectedTab: 0,\r\n        warning: \"\"\r\n\r\n    };\r\n    clearAllFields = () => {\r\n        this.setState({\r\n            email: \"\",\r\n            pswd: \"\",\r\n            rePswd: \"\",\r\n            warning: \"\"\r\n        })\r\n    }\r\n\r\n    validateEmail = () => {\r\n        if (/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(this.state.email)) {\r\n            return \"\"\r\n        } else return \"Invalid email\"\r\n\r\n    }\r\n\r\n    matchPasswords() {\r\n        if (this.state.pswd !== this.state.rePswd)\r\n            return \"passwords don't match\"\r\n    }\r\n\r\n    logInUser = async (e) => {\r\n        e.preventDefault();\r\n        let alertMsg = \"\";\r\n        if (this.state.email.length === 0) {\r\n            alertMsg = \"Please enter an email id\"\r\n        } else\r\n            alertMsg = this.validateEmail()\r\n\r\n        if (this.state.pswd.length === 0)\r\n            alertMsg = alertMsg + \"\\n Please enter your password\"\r\n        if (alertMsg.length !== 0) {\r\n            alert(alertMsg)\r\n            return;\r\n        }\r\n\r\n        let jsonMap = await makePostRequest('http://localhost:5000/login', {\r\n            \"email\": this.state.email,\r\n            \"pswd\": this.state.pswd\r\n        });\r\n        if (jsonMap.result === \"noEmail\") {\r\n            alertMsg = \"Email id doesn't exist, please sign up first\"\r\n        } else if (jsonMap.result === \"passwordError\") {\r\n            alertMsg = \"wrong password, please check your password\"\r\n        } else if (jsonMap.result === \"loggedIn\") {\r\n            // alertMsg=\"loggedIN\"\r\n            this.props.history.push('/customers')\r\n        }\r\n\r\n        if (alertMsg.length !== 0) {\r\n            alert(alertMsg)\r\n            return;\r\n        }\r\n\r\n    }\r\n    signUpUser = async () => {\r\n        //validate if password matches or not\r\n        let alertMsg = \"\";\r\n        if (this.state.email.length === 0) {\r\n            alertMsg = \"Please enter an email id\"\r\n        } else\r\n            alertMsg = this.validateEmail()\r\n\r\n        if (this.state.pswd.length === 0) {\r\n            alertMsg = alertMsg + \"\\nPlease enter a password\"\r\n        } else if (this.state.pswd !== this.state.rePswd) {\r\n            alertMsg = alertMsg + \"\\nPasswords don't match\"\r\n        }\r\n\r\n\r\n        if (alertMsg.trim().length !== 0) {\r\n            alert(alertMsg)\r\n            return;\r\n        }\r\n        //proceed with sending sign up details to server if all fields are filled correctly\r\n\r\n        let userSignUpDetails = new Map();\r\n        userSignUpDetails[\"email\"] = this.state.email;\r\n        userSignUpDetails[\"pswd\"] = this.state.pswd;\r\n        let jsonMap = await makePostRequest('http://localhost:5000/signup', userSignUpDetails);\r\n        // and then take user to login tab\r\n        console.log(\"response of sign up post request\")\r\n        console.log(jsonMap)\r\n        if (jsonMap.result === \"failed\")\r\n            alertMsg = \"failed to sign up, please try again\"\r\n        if (jsonMap.result === \"duplicateEmail\")\r\n            alertMsg = \"Email id already, exist, please use another email id  or reset password\"\r\n        if (alertMsg.trim().length !== 0) {\r\n            alert(alertMsg)\r\n            return;\r\n        }\r\n        if (alertMsg.length === 0)\r\n            this.setState({selectedTab: 0})\r\n    }\r\n\r\n\r\n    handleInputChange = (event) => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        })\r\n    }\r\n    changeTab = (tabNo) => {\r\n        this.setState({\r\n            selectedTab: tabNo\r\n        })\r\n        this.clearAllFields();\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className={\"crmHome-main\"}>\r\n                <div className=\"crmHome-title\">\r\n                    Best CRM App\r\n                </div>\r\n                <Paper className={\"paperForm\"}>\r\n                    <Tabs value={this.state.selectedTab} onChange={(ev, tabNo) => this.changeTab(tabNo)}\r\n                          aria-label=\"simple tabs example\">\r\n                        <Tab label=\"LOGIN\"/>\r\n                        <Tab label=\"SIGN UP\"/>\r\n                    </Tabs>\r\n\r\n                    <div className=\"loginView tabView\" hidden={this.state.selectedTab !== 0}>\r\n                        <TextField name=\"email\" id=\"logIn-email\" label=\"email\" variant=\"outlined\"\r\n                                   onChange={this.handleInputChange} value={this.state.email}/>\r\n\r\n                        <TextField name=\"pswd\" id=\"logIn-pswd\" label=\"password\" variant=\"outlined\" type={\"password\"}\r\n                                   onChange={this.handleInputChange} value={this.state.pswd}/>\r\n\r\n                        <Button color=\"primary\" variant=\"contained\"\r\n                                onClick={(e) => this.logInUser(e)}>log in\r\n                        </Button>\r\n                    </div>\r\n                    <div className=\"signupView tabView\" hidden={this.state.selectedTab !== 1}>\r\n                        <TextField name=\"email\" id=\"signUp-email\" label=\"email\" variant=\"outlined\"\r\n                                   onChange={this.handleInputChange} value={this.state.email}\r\n                            // error={this.errorBoolsList[0]}\r\n                        />\r\n\r\n                        <TextField name=\"pswd\" id=\"signUp-pswd\" label=\"password\" variant=\"outlined\" type={\"password\"}\r\n                                   onChange={this.handleInputChange} value={this.state.pswd}/>\r\n\r\n                        <TextField name=\"rePswd\" id=\"signUpRe-pswd\" label=\"password\" variant=\"outlined\"\r\n                                   type={\"password\"}\r\n                                   onChange={this.handleInputChange} value={this.state.rePswd}/>\r\n\r\n                        <Button color=\"primary\" variant=\"contained\"\r\n                                onClick={() => this.signUpUser()}>Sign Up\r\n                        </Button>\r\n                    </div>\r\n                </Paper>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport async function makePostRequest(url, dataAsMap) {\r\n    let response = await fetch(url, {\r\n        method: 'POST',\r\n        headers: {'Content-Type': 'application/json'},\r\n        credentials: \"include\",\r\n        body: JSON.stringify(dataAsMap)\r\n    })\r\n    let jsonMap = await response.json();\r\n    return jsonMap;\r\n}","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    table: {\r\n        minWidth: 650,\r\n    },\r\n});\r\n\r\n\r\nexport default function SimpleTable(props) {\r\n    const classes = useStyles();\r\n    // function deleteCustomerId(custId){\r\n    //     console.log(\"deleting stuff id:\"+custId);\r\n    //     let tableDataCopy = [].concat(props.tableData)\r\n    //     let indexOfCust=tableDataCopy.findIndex((cust)=>cust.custId===custId);\r\n    //     console.log(\"found index:\"+indexOfCust)\r\n    //     tableDataCopy.splice(indexOfCust,1);\r\n    //     localStorage.setItem('myData', JSON.stringify(tableDataCopy));\r\n    //\r\n    // }\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            {/*{console.log(props)}*/}\r\n            <Table className={classes.table} aria-label=\"simple table\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>Customer ID</TableCell>\r\n                        <TableCell align=\"right\">Name</TableCell>\r\n                        <TableCell align=\"right\">Gender</TableCell>\r\n                        <TableCell align=\"right\">Contact No</TableCell>\r\n                        <TableCell align=\"right\">Remove?</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {props.tableData.map((row,idx) => (\r\n                        <TableRow key={row.name}>\r\n                            <TableCell component=\"th\" scope=\"row\">\r\n                                {row._id}\r\n                            </TableCell>\r\n                            <TableCell align=\"right\">{row.name}</TableCell>\r\n                            <TableCell align=\"right\">{row.gender}</TableCell>\r\n                            <TableCell align=\"right\">{row.contact}</TableCell>\r\n                            <TableCell align=\"right\">{props.deletingCustList.includes(row._id) ? <div>\r\n                                <CircularProgress color=\"secondary\"/></div> : <Button\r\n                                variant=\"contained\"\r\n                                color=\"secondary\"\r\n                                className={\"deleteBtn\"}\r\n                                startIcon={<DeleteIcon/>}\r\n                                onClick={() => {\r\n                                    props.deleteCustomerId(row._id,idx)\r\n                                }}\r\n                            />}</TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n}","import React from \"react\";\r\nimport './styles.css'\r\nimport {Button} from '@material-ui/core';\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport SimpleTable from \"../Table\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport {Alert} from '@material-ui/lab';\r\nimport {makePostRequest} from \"../CrmHome\";\r\n\r\nclass EnquiryForm extends React.Component {\r\n    state = {\r\n        customerName: '',\r\n        gender: \"Male\",\r\n        mobNo: \"\",\r\n        fetchedData: \"\",\r\n        tableData: [],\r\n        deletingCustList: [],\r\n        openSnackBar: false,\r\n        lastDeletedCustomer: {},\r\n        showUndoIndicator: false\r\n    };\r\n\r\n    errorBoolsList = [false, false];\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    }\r\n\r\n    setErrorsList = (errorsList) => {\r\n        console.log(\"errorList is:\" + errorsList)\r\n        this.errorBoolsList = [].concat(errorsList);\r\n    }\r\n    showSnackBar = () => {\r\n        this.setState({openSnackBar: true});\r\n    };\r\n\r\n    closeSnackBar = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n\r\n        this.setState({openSnackBar: false});\r\n    };\r\n    createData = (customerID, name, gender, contact,) => {\r\n        return {_id:customerID, name, gender, contact,}\r\n    }\r\n\r\n    deleteCustomerId = async (custId, idx) => {\r\n        let customerDataWithIndex={}\r\n        customerDataWithIndex.data=this.state.tableData[idx]\r\n        customerDataWithIndex.index=idx;\r\n        //step 1 : add cust id to deleting list, so that indicator can be shown for deleting item\r\n        this.setState({deletingCustList: this.state.deletingCustList.concat(custId)})\r\n        console.log(\"deleting custID:\" + custId);\r\n\r\n        //step2: remove that customer from local table and also make network request to remove it from server.\r\n\r\n        let res = await makePostRequest(\"http://localhost:5000/deleteCustomer\", {\r\n            customerID: custId,\r\n        })\r\n        let deletedCustomerID = custId;\r\n        console.log(\"deleting custID from network, now updating local variables:\" + custId);\r\n        this.setState({\r\n            lastDeletedCustomer: customerDataWithIndex,\r\n            tableData: this.state.tableData.filter((cust) => cust[\"_id\"] != custId),\r\n            deletingCustList: this.state.deletingCustList.filter((id) => id !== custId)\r\n        });\r\n        console.log(\"main list, deleting id list and last cust deleting list updated using setState, showing snackbar now\" + custId);\r\n        this.showSnackBar();\r\n    }\r\n    validateData = () => {\r\n        let tempBoolsList = [false, false];\r\n        let alertWarning = [];\r\n        if (this.state.customerName.length === 0) {\r\n            alertWarning.push(\"Customer Name can't be empty\");\r\n            tempBoolsList[0] = true;\r\n        }\r\n        if (this.state.mobNo.length === 0) {\r\n            alertWarning.push(\"Contact number can't be empty\");\r\n            tempBoolsList[1] = true;\r\n        }\r\n        if (isNaN(this.state.mobNo)) {\r\n            alertWarning.push(\"Please enter valid mob number\");\r\n            tempBoolsList[1] = true;\r\n        }\r\n        if (`${parseInt(this.state.mobNo)}`.length !== 10) {\r\n            alertWarning.push(\"Contact Number needs to be of 10 digit\");\r\n            tempBoolsList[1] = true;\r\n        }\r\n\r\n        if (alertWarning.length > 0)\r\n            alert(alertWarning.join(\"\\n\"));\r\n        this.setErrorsList(tempBoolsList);\r\n        this.setState();\r\n        return alertWarning.length === 0\r\n    }\r\n    handleInputChange = (event) => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        })\r\n    }\r\n    genderList = [\"Male\", \"Female\", \"Rather Not Say\", \"Others\"];\r\n    undoDelete = async () => {\r\n        this.closeSnackBar();\r\n        this.setState({showUndoIndicator: true})\r\n        let deleteMap = new Map();\r\n        deleteMap[\"customerID\"] = this.state.lastDeletedCustomer.data._id;\r\n        let res = await makePostRequest(\"http://localhost:5000/undoDelete\", deleteMap)\r\n        console.log(\"res from undo\" + JSON.stringify(res))\r\n        let tableDataCopy = [].concat(this.state.tableData);\r\n        let deletingCustListCopy = [].concat(this.state.deletingCustList);\r\n        deletingCustListCopy = deletingCustListCopy.filter((custId) => res[\"deletedCustomer\"][\"customerID\"] !== custId)\r\n        this.setState({custIdBeingDeleted: deletingCustListCopy});\r\n        console.log(\"trying to update table data after undo, custID and index is\", res[\"deletedCustomerId\"], this.state.lastDeletedCustomer.index)\r\n        console.log(\"going to undo delete for cust with data and at index\",this.state.lastDeletedCustomer.data,this.state.lastDeletedCustomer.index)\r\n        await this.updateTableData(tableDataCopy, this.state.lastDeletedCustomer.data, this.state.lastDeletedCustomer.index)\r\n        this.setState({showUndoIndicator: false})\r\n    }\r\n\r\n    updateTableData = async (tableArray, elementoBeAdded, position) => {\r\n        console.log(\"position in new function is: and element to be added is \" + position,elementoBeAdded)\r\n        // elementoBeAdded._id=elementoBeAdded.customerID\r\n        if (position === undefined)\r\n            tableArray.push(elementoBeAdded)\r\n        else\r\n            tableArray.splice(position, 0, elementoBeAdded);\r\n        this.setState({tableData: tableArray || [], lastDeletedCustomer: {}});\r\n    }\r\n    getCustomerIdAndSaveData = async () => {\r\n        if (!this.validateData()) {\r\n            this.setState({}, () => this.errorBoolsList);\r\n            return 0;\r\n        }\r\n        this.setState({fetchedData: null});\r\n        let custDataMap = new Map();\r\n        custDataMap[\"name\"] = this.state.customerName;\r\n        custDataMap[\"gender\"] = this.state.gender;\r\n        custDataMap[\"contact\"] = this.state.mobNo;\r\n        let jsonMap = await makePostRequest('http://localhost:5000/', custDataMap);\r\n        this.setState({fetchedData: jsonMap['_id']});\r\n        console.log(\"response from server after adding another customer is ,\",jsonMap)\r\n        console.log(this.state);\r\n        console.log(\"fetched CustomerID is: \" + jsonMap['_id']);\r\n\r\n        let tableDataCopy = [].concat(this.state.tableData);\r\n        await this.updateTableData(tableDataCopy, this.createData(jsonMap['_id'], this.state.customerName, this.state.gender, this.state.mobNo))\r\n        this.setState({\r\n            customerName: '',\r\n            gender: \"Male\",\r\n            mobNo: \"\",\r\n            fetchedData: \"\",\r\n        }, () => this.errorBoolsList)\r\n    }\r\n\r\n    fetchFormData = async () => {\r\n        let resp = await fetch(\"http://localhost:5000/customers\", {credentials: \"include\",});\r\n        if (resp.status === 403) {\r\n            alert(\"You need to login to view this page\")\r\n            this.props.history.push('/')\r\n            console.log(\"gone to home page\")\r\n        }\r\n        let dataList = await resp.json();\r\n        this.setState({tableData: dataList ?? []})\r\n        // return JSON.parse(resp.body);\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(\"mounted\")\r\n        this.fetchFormData();\r\n        console.log(\"data from local storage\");\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <Paper className=\"paper\">\r\n                    <form>\r\n                        <div>\r\n                            <TextField name=\"customerName\" id=\"customerName\" label=\"Customer Name\" variant=\"outlined\"\r\n                                       onChange={this.handleInputChange} value={this.state.customerName}\r\n                                       error={this.errorBoolsList[0]}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <TextField name=\"mobNo\" id=\"mobNo\" label=\"Contact No.\" variant=\"outlined\"\r\n                                       onChange={this.handleInputChange} value={this.state.mobNo}\r\n                                       error={this.errorBoolsList[1]}/>\r\n\r\n                        </div>\r\n                        <div>\r\n\r\n\r\n                            <Select\r\n                                labelId=\"demo-simple-select-outlined-label\"\r\n                                id=\"demo-simple-select-outlined\"\r\n                                name={\"gender\"}\r\n                                value={this.state.gender}\r\n                                onChange={this.handleInputChange}\r\n                                color=\"secondary\"\r\n                            >\r\n                                {this.genderList.map((el) =>\r\n                                    (<MenuItem value={el}>{el}</MenuItem>)\r\n                                )}\r\n                            </Select>\r\n\r\n                        </div>\r\n\r\n                    </form>\r\n                    {this.state.fetchedData === null ? <div>\r\n                            <CircularProgress color=\"secondary\"/></div> :\r\n                        <div>\r\n                            <Button color=\"primary\" variant=\"contained\" onClick={() => this.getCustomerIdAndSaveData()}>Save\r\n                                info\r\n                            </Button>\r\n                            {this.state.showUndoIndicator ? <div>\r\n                                <CircularProgress color=\"secondary\"/></div> : \"\"}\r\n                        </div>}\r\n                </Paper>\r\n                {this.state.tableData.length !== 0 ?\r\n                    <SimpleTable className=\"simpleTable\" tableData={this.state.tableData}\r\n                                 deletingCustList={this.state.deletingCustList}\r\n                                 deleteCustomerId={(custId, idx) => this.deleteCustomerId(custId, idx)}/> : \"\"}\r\n                <Snackbar open={this.state.openSnackBar} autoHideDuration={3000} onClose={this.closeSnackBar}>\r\n                    <Alert onClose={this.closeSnackBar} severity=\"success\" action={\r\n                        <Button color=\"inherit\" size=\"small\" onClick={this.undoDelete}>\r\n                            Undo\r\n                        </Button>\r\n                    }>\r\n                        Customer Deleted!\r\n                    </Alert>\r\n                </Snackbar>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default EnquiryForm;","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport CrmHome, {makePostRequest} from \"./CrmHome\";\r\nimport {Route, Switch, useHistory} from \"react-router-dom\";\r\nimport EnquiryForm from \"./EnquiryForm\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport {Button} from \"@material-ui/core\";\r\n\r\nfunction App(props) {\r\n    const history = useHistory();\r\n\r\n    async function logOutUser() {\r\n        console.log(\"logging out user\")\r\n        let result = await makePostRequest(\"http://localhost:5000/logout\", {\r\n            \"reqType\": \"log me out\",\r\n        })\r\n\r\n        if (result.status === \"loggedOut\") {\r\n            history.push(\"/\")\r\n        } else {\r\n            alert(\"Error logging out, try again\")\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        const test = props;\r\n        console.log(\"test:\");\r\n        console.log(test)\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\" className={\"topAppBar\"}>\r\n                <Toolbar className={\"appBar-toolBar\"}>\r\n\r\n                    <Button color=\"inherit\" onClick={logOutUser}>Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <header className=\"App-header\">\r\n                <Switch>\r\n\r\n                    <Route exact path={\"/customers\"} component={EnquiryForm}/>\r\n\r\n                    <Route path={\"/\"} component={CrmHome}/>\r\n                    {/*<Route path={\"/reactForms\"} component={CrmHome}/>*/}\r\n\r\n                </Switch>\r\n            </header>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {BrowserRouter as Router} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Router>\r\n            <App/>\r\n        </Router>\r\n    </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}